[{"authors":null,"categories":null,"content":"This feature can be used for publishing content such as:\n Project or software documentation Online courses Tutorials  The parent folder may be renamed, for example, to docs for project documentation or course for creating an online course.\nTo disable this feature, either delete the parent folder, or set draft = true in the front matter of all its pages.\nAfter renaming or deleting the parent folder, you may wish to update any [[menu.main]] menu links to it in the config.toml.\n","date":1536415200,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1536415200,"objectID":"c3224f3a64174f08aaf31e1f1d16ffd3","permalink":"/tutorial/","publishdate":"2018-09-09T00:00:00+10:00","relpermalink":"/tutorial/","section":"tutorial","summary":"This feature can be used for publishing content such as:\n Project or software documentation Online courses Tutorials  The parent folder may be renamed, for example, to docs for project documentation or course for creating an online course.\nTo disable this feature, either delete the parent folder, or set draft = true in the front matter of all its pages.\nAfter renaming or deleting the parent folder, you may wish to update any [[menu.","tags":null,"title":"Overview","type":"docs"},{"authors":null,"categories":["R"],"content":"\rLa base de datos\rContinuamos trabajando con el data.frame msleep, siempre con la intención de permitir la reproductibilidad del código.\nglimpse(msleep)\r## Observations: 83\r## Variables: 11\r## $ name \u0026lt;chr\u0026gt; \u0026quot;Cheetah\u0026quot;, \u0026quot;Owl monkey\u0026quot;, \u0026quot;Mountain beaver\u0026quot;, \u0026quot;Grea...\r## $ genus \u0026lt;chr\u0026gt; \u0026quot;Acinonyx\u0026quot;, \u0026quot;Aotus\u0026quot;, \u0026quot;Aplodontia\u0026quot;, \u0026quot;Blarina\u0026quot;, \u0026quot;Bo...\r## $ vore \u0026lt;chr\u0026gt; \u0026quot;carni\u0026quot;, \u0026quot;omni\u0026quot;, \u0026quot;herbi\u0026quot;, \u0026quot;omni\u0026quot;, \u0026quot;herbi\u0026quot;, \u0026quot;herbi...\r## $ order \u0026lt;chr\u0026gt; \u0026quot;Carnivora\u0026quot;, \u0026quot;Primates\u0026quot;, \u0026quot;Rodentia\u0026quot;, \u0026quot;Soricomorph...\r## $ conservation \u0026lt;chr\u0026gt; \u0026quot;lc\u0026quot;, NA, \u0026quot;nt\u0026quot;, \u0026quot;lc\u0026quot;, \u0026quot;domesticated\u0026quot;, NA, \u0026quot;vu\u0026quot;, N...\r## $ sleep_total \u0026lt;dbl\u0026gt; 12.1, 17.0, 14.4, 14.9, 4.0, 14.4, 8.7, 7.0, 10.1...\r## $ sleep_rem \u0026lt;dbl\u0026gt; NA, 1.8, 2.4, 2.3, 0.7, 2.2, 1.4, NA, 2.9, NA, 0....\r## $ sleep_cycle \u0026lt;dbl\u0026gt; NA, NA, NA, 0.1333333, 0.6666667, 0.7666667, 0.38...\r## $ awake \u0026lt;dbl\u0026gt; 11.9, 7.0, 9.6, 9.1, 20.0, 9.6, 15.3, 17.0, 13.9,...\r## $ brainwt \u0026lt;dbl\u0026gt; NA, 0.01550, NA, 0.00029, 0.42300, NA, NA, NA, 0....\r## $ bodywt \u0026lt;dbl\u0026gt; 50.000, 0.480, 1.350, 0.019, 600.000, 3.850, 20.4...\r\rRecuento de eventos:\r\rNúmero de observaciónes:\r\rDeterminar el número de observaciones para cada uno de los niveles de una variable específica, es una tarea que puede ser completada fácilmente con la función count().\rUno de los argumentos útiles de esta función es: sort = TRUE, el cual nos permite ordenar los resultados en forma decreciente:\nmsleep %\u0026gt;% count(order, sort = TRUE)\rmsleep %\u0026gt;% count(order, sort = TRUE) %\u0026gt;% head(n = 10) %\u0026gt;% kable()\r\r\rorder\rn\r\r\r\rRodentia\r22\r\rCarnivora\r12\r\rPrimates\r12\r\rArtiodactyla\r6\r\rSoricomorpha\r5\r\rCetacea\r3\r\rHyracoidea\r3\r\rPerissodactyla\r3\r\rChiroptera\r2\r\rCingulata\r2\r\r\r\rLa función count() puede actuar sobre múltiples variables, el siguiente ejemplo cuenta el número de observaciones para cada uno de los niveles de las variables order y vore:\nmsleep %\u0026gt;% count(order, vore, sort = TRUE)\r\r\rorder\rvore\rn\r\r\r\rRodentia\rherbi\r16\r\rCarnivora\rcarni\r12\r\rPrimates\romni\r10\r\rArtiodactyla\rherbi\r5\r\rCetacea\rcarni\r3\r\rPerissodactyla\rherbi\r3\r\rRodentia\rNA\r3\r\rSoricomorpha\romni\r3\r\rChiroptera\rinsecti\r2\r\rHyracoidea\rherbi\r2\r\r\r\r\rAdjuntando el número de observaciones en una nueva columna:\r\rSi el interés es solo conocer el número total de observaciones en el data.frame, la función tally() puede ayudar con esta tarea. Esta función es homologa con nrow().Esta función no puede ser utilizada sobre variables específicas.\nmsleep %\u0026gt;% tally()\r---\rmsleep %\u0026gt;% nrow()\r\rtally()\r\r\r\rn\r\r\r\r83\r\r\r\r\rnrow()\r\r\r\rx\r\r\r\r83\r\r\r\rLa función add_tally() crea una nueva columna con el número total de observaciones, semejante a mutate(n = n()).\nmsleep %\u0026gt;% select(1:3) %\u0026gt;% add_tally()\r\r\rname\rgenus\rvore\rn\r\r\r\rCheetah\rAcinonyx\rcarni\r83\r\rOwl monkey\rAotus\romni\r83\r\rMountain beaver\rAplodontia\rherbi\r83\r\rGreater short-tailed shrew\rBlarina\romni\r83\r\rCow\rBos\rherbi\r83\r\rThree-toed sloth\rBradypus\rherbi\r83\r\r\r\rLa función add_count() toma como argumento una variable y crea una nueva columna con el número de observaciones para cada uno de sus niveles:\nmsleep %\u0026gt;% select(name:vore) %\u0026gt;% add_count(vore)\r\r\rname\rgenus\rvore\rn\r\r\r\rCheetah\rAcinonyx\rcarni\r19\r\rOwl monkey\rAotus\romni\r20\r\rMountain beaver\rAplodontia\rherbi\r32\r\rGreater short-tailed shrew\rBlarina\romni\r20\r\rCow\rBos\rherbi\r32\r\rThree-toed sloth\rBradypus\rherbi\r32\r\rNorthern fur seal\rCallorhinus\rcarni\r19\r\rVesper mouse\rCalomys\rNA\r7\r\rDog\rCanis\rcarni\r19\r\rRoe deer\rCapreolus\rherbi\r32\r\r\r\r\rsummarise() - summarize()\r\rConstruyendo tablas de resumen\n\rNota: Algunas de las funciones en dplyr() son nombradas tanto en Ingles Americano como Ingles Británico. Así la función summarise() es equivalente a summarize().\n\r\rComo ya observamos líneas antes; si el interés es conocer el número de observaciones, la función count() puede cumplir esa tarea. Pero si buscamos conocer el promedio, la suma, el mínimo, el máximo y el número de observaciones necesitaremos apoyarnos en otra función. La función summarize() permitirá alcanzar este objetivo. Esta función necesita como argumentos:\nEl nombre de la nueva columna.\rEl operador de asignación igual (\u0026quot;=\u0026quot;).\rLa función que se desea aplicar sobre la variable.\r\rdata_frame %\u0026gt;%\rsummarise(nombre_columna = función(variable))\nEs posible utilizar múltiples funciones, una seguida de otra:\nmsleep %\u0026gt;% summarise(n = n(),\rpromedio = mean(sleep_total),\rmaximo = max(sleep_total))\r\r\rn\rpromedio\rmaximo\r\r\r\r83\r10.43373\r19.9\r\r\r\r\rgroup_by()\rEn muchas oportunidades es necesario realizar un cambio en nuestra unidad de análisis, a fin de conocer los valores totales para cada uno de los niveles de una variable categórica. Para cumplir con esta tarea es necesario complementar el poder de la función summarize() con la función group_by(), esta permite modificar la unidad de análisis.\nEs posible utilizar más de una variable como argumento de la función group_by().\nmsleep %\u0026gt;% group_by(vore) %\u0026gt;% summarise(n = n(),\raverage = mean(sleep_total), maximum = max(sleep_total))\r\r\rvore\rn\raverage\rmaximum\r\r\r\rcarni\r19\r10.378947\r19.4\r\rherbi\r32\r9.509375\r16.6\r\rinsecti\r5\r14.940000\r19.9\r\romni\r20\r10.925000\r18.0\r\rNA\r7\r10.185714\r13.7\r\r\r\rsummarise() puede utilizar como argumento cualquier función que resuma en un valor una característica de un grupo de observaciones:\n\rn() - determina el número de observaciones para cada uno de los niveles de una variable, No es necesario especificar un argumento.\n\rn_distinct(variable) - determina el número de observaciones o niveles únicos de una variable.\n\rsum(variable) suma, max(variable) máximo, min(variable) mínimo , …\n\rmean(variable), median(variable), sd(variable), IQR(variable), …\n\r\rEl ejemplo siguiente calcula el promedio de la variable sleep_total y lo divide por 24, permitiéndonos determinar la proporción de horas de sueño por día. Esto para cada uno de los niveles de la variable vore.\nmsleep %\u0026gt;% group_by(vore) %\u0026gt;% summarise(avg_sleep_day = mean(sleep_total)/24)\r\r\rvore\ravg_sleep_day\r\r\r\rcarni\r0.4324561\r\rherbi\r0.3962240\r\rinsecti\r0.6225000\r\romni\r0.4552083\r\rNA\r0.4244048\r\r\r\r\rVariantes de la función summarize()\rAl igual que las funciónes filter(), select() y mutate()); summarise() tiene tres variantes que permiten trabajar sobre multiples columnas con un solo comando:\nsummarise_all()\rEsta requiere como argumento una función conglomerante, la cual actuara sobre los elementos de una columna.\nEl siguiente ejemplo calcula el promedio de cada una de las columnas, en ocasiones será necesario incluir como argumento na.rm = TRUE para ignorar las observaciones con valores NA.\n\rSin considerar el argumento na.rm\r\rmsleep %\u0026gt;% select_if( is.numeric) %\u0026gt;% summarise_all(mean) \r\r\rsleep_total\rsleep_rem\rsleep_cycle\rawake\rbrainwt\rbodywt\r\r\r\r10.43373\rNA\rNA\r13.56747\rNA\r166.1363\r\r\r\r\rIgnorando los valores NA\r\rmsleep %\u0026gt;% select_if( is.numeric) %\u0026gt;% summarise_all(mean, narm = TRUE) \r\r\rsleep_total\rsleep_rem\rsleep_cycle\rawake\rbrainwt\rbodywt\r\r\r\r10.43373\r1.87541\r0.4395833\r13.56747\r0.2815814\r166.1363\r\r\r\rUtilizando las funciones group_by() y summarize(). El siguiente ejemplo retorna el promedio de todas las variables para cada uno de los niveles de la variable vore.\nmsleep %\u0026gt;% group_by(vore) %\u0026gt;% summarise_all(mean, na.rm = TRUE) %\u0026gt;% select(-c(2:5))\r\r\rvore\rsleep_total\rsleep_rem\rsleep_cycle\rawake\rbrainwt\rbodywt\r\r\r\rcarni\r10.378947\r2.290000\r0.3733333\r13.62632\r0.0792556\r90.75111\r\rherbi\r9.509375\r1.366667\r0.4180556\r14.49062\r0.6215975\r366.87725\r\rinsecti\r14.940000\r3.525000\r0.1611111\r9.06000\r0.0215500\r12.92160\r\romni\r10.925000\r1.955556\r0.5924242\r13.07500\r0.1457312\r12.71800\r\rNA\r10.185714\r1.880000\r0.1833333\r13.81429\r0.0076260\r0.85800\r\r\r\rEl argumento utilizado como instrucción para generar agrupar (resumir las observaciones) tiene que ser una función. Cuando no se tenga una función predeterminada en el ambiente de R o como parte de un paquete, es posible construir una función anónima.\nEl siguiente ejemplo incremente en 5 al promedio de cada una de las columnas del data.frame. La función anónima que nos permita cumplir esta tarea puede ser construida de las siguientes formas: funs(mean(., na.rm = TRUE) + 5), o : ~mean(., na.rm = TRUE) + 5.\nmsleep %\u0026gt;%\rgroup_by(vore) %\u0026gt;% summarise_all(~mean(., na.rm = TRUE) + 5) \r\r\rvore\rsleep_total\rsleep_rem\rsleep_cycle\rawake\rbrainwt\rbodywt\r\r\r\rcarni\r15.37895\r7.290000\r5.373333\r18.62632\r5.079256\r95.75111\r\rherbi\r14.50938\r6.366667\r5.418056\r19.49063\r5.621598\r371.87725\r\rinsecti\r19.94000\r8.525000\r5.161111\r14.06000\r5.021550\r17.92160\r\romni\r15.92500\r6.955556\r5.592424\r18.07500\r5.145731\r17.71800\r\rNA\r15.18571\r6.880000\r5.183333\r18.81429\r5.007626\r5.85800\r\r\r\r\rsummarise_if()\rEsta función necesita dos argumentos:\n\rPrimero necesitamos información referente a las columnas que serán considerada. Esta información es obtenida mediante una función cuyos resultados son valores boléanos (TRUE, FALSE). Los funciones más frecuentes: is.numeric, is.integer, is.double, is.logical, is.factor, lubridate::is.POSIXt o lubridate::is.Date.\n\rSegundo, es necesaria una función conglomerante predeterminada (mean, sum, …) o una función anónima construida con mediante la función funs() o el operador ~.\n\r\rEl ejemplo retorna el promedio de todas las variables numéricas agrupadas mediante la variable vore:\nmsleep %\u0026gt;% group_by(vore) %\u0026gt;% summarise_if(is.numeric, mean, na.rm=TRUE)\r\r\rvore\rsleep_total\rsleep_rem\rsleep_cycle\rawake\rbrainwt\rbodywt\r\r\r\rcarni\r10.378947\r2.290000\r0.3733333\r13.62632\r0.0792556\r90.75111\r\rherbi\r9.509375\r1.366667\r0.4180556\r14.49062\r0.6215975\r366.87725\r\rinsecti\r14.940000\r3.525000\r0.1611111\r9.06000\r0.0215500\r12.92160\r\romni\r10.925000\r1.955556\r0.5924242\r13.07500\r0.1457312\r12.71800\r\rNA\r10.185714\r1.880000\r0.1833333\r13.81429\r0.0076260\r0.85800\r\r\r\rUno de los puntos débiles de las funciones conglomerantes es que podemos estar expuestos a confusión, al no saber qué información es la que se obtiene como resultado. Afortunadamente la función rename_*() nos permite renombrar el nombre de cada una de las columnas:\nmsleep %\u0026gt;% group_by(vore) %\u0026gt;% summarise_if(is.numeric, mean, na.rm=TRUE) %\u0026gt;% rename_if(is.numeric, ~paste0(\u0026quot;promedio_\u0026quot;, .))\r\r\rvore\rpromedio_sleep_total\rpromedio_sleep_rem\rpromedio_sleep_cycle\r\r\r\rcarni\r10.378947\r2.290000\r0.3733333\r\rherbi\r9.509375\r1.366667\r0.4180556\r\rinsecti\r14.940000\r3.525000\r0.1611111\r\romni\r10.925000\r1.955556\r0.5924242\r\rNA\r10.185714\r1.880000\r0.1833333\r\r\r\r\rsummarise_at()\rEsta variante también requiere de dos argumentos:\nEl nombre de las columnas que serán consideradas, estas deberán estar incluidos como argumentos de la función vars().\n\rAdicionalmente, es necesario indicar cual será la función conglomerante que actuara sobre las variables seleccionadas.\n\r\rEl ejemplo siguiente proporciona como resultado el promedio de los valores de las columnas cuyos nombres contengan la palabra sleep y también renombran estas columnas promedio_variable para clarificar la información:\nmsleep %\u0026gt;%\rgroup_by(vore) %\u0026gt;% summarise_at(vars(contains(\u0026quot;sleep\u0026quot;)), mean, na.rm=TRUE) %\u0026gt;%\rrename_at(vars(contains(\u0026quot;sleep\u0026quot;)), ~paste0(\u0026quot;promedio_\u0026quot;, .))\r\r\rvore\rpromedio_sleep_total\rpromedio_sleep_rem\rpromedio_sleep_cycle\r\r\r\rcarni\r10.378947\r2.290000\r0.3733333\r\rherbi\r9.509375\r1.366667\r0.4180556\r\rinsecti\r14.940000\r3.525000\r0.1611111\r\romni\r10.925000\r1.955556\r0.5924242\r\rNA\r10.185714\r1.880000\r0.1833333\r\r\r\r\rOrdenamiento de filas\rEn muchas oportunidades es útil que nuestras tablas de resumen estén ordenadas, la función arrange() nos permite cumplir con esta tarea. El resultado de esta función ordena los valores en forma ascendente, pero es posible también ordenarlos de forma descendente incluyendo la función desc():\nOrdenando variables numéricas:\narrange(sleep_total) Ordena los tiempo en forma ascendente:\nmsleep %\u0026gt;% group_by(vore) %\u0026gt;% summarise(avg_sleep = mean(sleep_total)) %\u0026gt;% arrange(avg_sleep)\r\r\rvore\ravg_sleep\r\r\r\rherbi\r9.509375\r\rNA\r10.185714\r\rcarni\r10.378947\r\romni\r10.925000\r\rinsecti\r14.940000\r\r\r\rEl resultado opuesto puede ser obtenido mediante:\nmsleep %\u0026gt;% group_by(vore) %\u0026gt;% summarise(avg_sleep = mean(sleep_total)) %\u0026gt;% arrange(avg_sleep)\r\r\rvore\ravg_sleep\r\r\r\rherbi\r9.509375\r\rNA\r10.185714\r\rcarni\r10.378947\r\romni\r10.925000\r\rinsecti\r14.940000\r\r\r\rSi los datos están siendo analizados en función de los niveles de alguna variable específica, es posible ordenarlos agregando el argumento .by_group = TRUE a la función arrange():\nmsleep %\u0026gt;% select(vore, sleep_total) %\u0026gt;% group_by(vore) %\u0026gt;% arrange(desc(sleep_total), .by_group = TRUE)\r\r\rvore\rsleep_total\r\r\r\rcarni\r19.4\r\rcarni\r17.4\r\rcarni\r15.8\r\rcarni\r14.5\r\rcarni\r13.5\r\rcarni\r12.5\r\r\r\r\r\rvore\rsleep_total\r\r\r\rherbi\r16.6\r\rherbi\r15.9\r\rherbi\r15.8\r\rherbi\r14.9\r\rherbi\r14.6\r\rherbi\r14.4\r\r\r\r\rTrabajando con partes de nuestro data.frame\r\rEn algunos casos nuestro objetivo es trabajar con partes de nuestros datos, algunas de las funciones que nos ayudaran con esta tarea:\n\rLos n valores más altos y bajos:\rSi deseas conocer los 5 valores más altos del promedio de la variable sleep_total\nmsleep %\u0026gt;% group_by(order) %\u0026gt;% summarise(average = mean(sleep_total)) %\u0026gt;% top_n(5) %\u0026gt;% arrange(desc(average))\r\r\rorder\raverage\r\r\r\rChiroptera\r19.80\r\rDidelphimorphia\r18.70\r\rCingulata\r17.75\r\rAfrosoricida\r15.60\r\rPilosa\r14.40\r\r\r\rLos 5 valores más bajos pueden ser recuperados con la ayuda de: top_n(-5):\nmsleep %\u0026gt;% group_by(order) %\u0026gt;% summarise(average = mean(sleep_total)) %\u0026gt;% top_n(-5) %\u0026gt;% arrange(desc(average))\r\r\rorder\raverage\r\r\r\rHyracoidea\r5.666667\r\rArtiodactyla\r4.516667\r\rCetacea\r4.500000\r\rProboscidea\r3.600000\r\rPerissodactyla\r3.466667\r\r\r\rSi tienes más de una columna, es posible agregar como argumento el nombre de la variable de la cual se quiere recuperar la información:\nmsleep %\u0026gt;% group_by(order) %\u0026gt;% summarise(average_sleep = mean(sleep_total),\rmax_sleep = max(sleep_total)) %\u0026gt;% top_n(5, average_sleep)\r\r\rorder\raverage_sleep\rmax_sleep\r\r\r\rAfrosoricida\r15.60\r15.6\r\rChiroptera\r19.80\r19.9\r\rCingulata\r17.75\r18.1\r\rDidelphimorphia\r18.70\r19.4\r\rPilosa\r14.40\r14.4\r\r\r\r\rMuestreo aleatoria de filas:\rMediante la función sample_n() es posible tomar una muestra aleatoria de n filas de nuestro data.frame.\nmsleep %\u0026gt;% sample_n(6) %\u0026gt;% select_if(is.character)\r\r\rname\rgenus\rvore\rorder\rconservation\r\r\r\rPotoroo\rPotorous\rherbi\rDiprotodontia\rNA\r\rAfrican striped mouse\rRhabdomys\romni\rRodentia\rNA\r\rDog\rCanis\rcarni\rCarnivora\rdomesticated\r\rTenrec\rTenrec\romni\rAfrosoricida\rNA\r\rJaguar\rPanthera\rcarni\rCarnivora\rnt\r\rAfrican giant pouched rat\rCricetomys\romni\rRodentia\rNA\r\r\r\rUna variante de esta función nos permite recuperar una fracción de las filas del data.frame, sample_frac(). El siguiente ejemplo recupera el 10% de las filas de nuestra base de datos.\nmsleep %\u0026gt;% sample_frac(.1) %\u0026gt;% select_if(is.numeric)\r\r\rsleep_total\rsleep_rem\rsleep_cycle\rawake\rbrainwt\rbodywt\r\r\r\r9.8\r1.1\r0.5500000\r14.2\r0.0050\r0.200\r\r15.8\rNA\rNA\r8.2\rNA\r0.112\r\r8.4\r0.9\r0.4166667\r15.6\r0.0121\r2.500\r\r12.5\r3.2\r0.4166667\r11.5\r0.0256\r3.300\r\r13.5\rNA\rNA\r10.5\rNA\r161.499\r\r10.9\r1.1\rNA\r13.1\r0.1150\r10.000\r\r11.0\rNA\rNA\r13.0\rNA\r1.100\r\r17.4\r3.1\r0.3833333\r6.6\r0.0108\r3.500\r\r\r\r\rFilas específicas:\rLas funciones head() y tail() permiten recuperar las 6 primeras y últimas filas del data.frame, respectivamente. Esto puede ser modificado usando como argumento n = x en ambas funciones.\nSi deseamos examinar filas de la parte media de nuestro dataframe la función slice() nos permite recuperar estas filas. El ejemplo muestra cono recuperar las filas 50 a la 55.\nmsleep %\u0026gt;% slice(50:55) %\u0026gt;% select(- c(2:5))\r\r\rname\rsleep_total\rsleep_rem\rsleep_cycle\rawake\rbrainwt\rbodywt\r\r\r\rChimpanzee\r9.7\r1.4\r1.4166667\r14.3\r0.4400\r52.200\r\rTiger\r15.8\rNA\rNA\r8.2\rNA\r162.564\r\rJaguar\r10.4\rNA\rNA\r13.6\r0.1570\r100.000\r\rLion\r13.5\rNA\rNA\r10.5\rNA\r161.499\r\rBaboon\r9.4\r1.0\r0.6666667\r14.6\r0.1800\r25.235\r\rDesert hedgehog\r10.3\r2.7\rNA\r13.7\r0.0024\r0.550\r\r\r\r\r\rReferencias:\rBasado en el tutorial de Suzan Baert: Data Wrangling Part 4: Summarizing and slicing your data\r\r\r","date":1543190400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1543190400,"objectID":"133078a192aadf602943a92b584af277","permalink":"/post/2018-11-26-data_wrangling_4/","publishdate":"2018-11-26T00:00:00Z","relpermalink":"/post/2018-11-26-data_wrangling_4/","section":"post","summary":"La base de datos\rContinuamos trabajando con el data.frame msleep, siempre con la intención de permitir la reproductibilidad del código.\nglimpse(msleep)\r## Observations: 83\r## Variables: 11\r## $ name \u0026lt;chr\u0026gt; \u0026quot;Cheetah\u0026quot;, \u0026quot;Owl monkey\u0026quot;, \u0026quot;Mountain beaver\u0026quot;, \u0026quot;Grea...\r## $ genus \u0026lt;chr\u0026gt; \u0026quot;Acinonyx\u0026quot;, \u0026quot;Aotus\u0026quot;, \u0026quot;Aplodontia\u0026quot;, \u0026quot;Blarina\u0026quot;, \u0026quot;Bo...\r## $ vore \u0026lt;chr\u0026gt; \u0026quot;carni\u0026quot;, \u0026quot;omni\u0026quot;, \u0026quot;herbi\u0026quot;, \u0026quot;omni\u0026quot;, \u0026quot;herbi\u0026quot;, \u0026quot;herbi...\r## $ order \u0026lt;chr\u0026gt; \u0026quot;Carnivora\u0026quot;, \u0026quot;Primates\u0026quot;, \u0026quot;Rodentia\u0026quot;, \u0026quot;Soricomorph...\r## $ conservation \u0026lt;chr\u0026gt; \u0026quot;lc\u0026quot;, NA, \u0026quot;nt\u0026quot;, \u0026quot;lc\u0026quot;, \u0026quot;domesticated\u0026quot;, NA, \u0026quot;vu\u0026quot;, N.","tags":["R Markdown","Data management"],"title":"Data Wrangling Part 4","type":"post"},{"authors":null,"categories":["R"],"content":"\rEsta es la tercera parte de la serie Data Wrangling.\nLas librerias:\rlibrary(tidyverse)\r\rLa base de datos:\rContinuaremos trabajando con la información contenida en la base de datos msleep. Con la finalidad de facilitar la reproductibilidad del código usado en este tutorial.\ndata(\u0026quot;msleep\u0026quot;)\rglimpse(msleep)\r## Observations: 83\r## Variables: 11\r## $ name \u0026lt;chr\u0026gt; \u0026quot;Cheetah\u0026quot;, \u0026quot;Owl monkey\u0026quot;, \u0026quot;Mountain beaver\u0026quot;, \u0026quot;Grea...\r## $ genus \u0026lt;chr\u0026gt; \u0026quot;Acinonyx\u0026quot;, \u0026quot;Aotus\u0026quot;, \u0026quot;Aplodontia\u0026quot;, \u0026quot;Blarina\u0026quot;, \u0026quot;Bo...\r## $ vore \u0026lt;chr\u0026gt; \u0026quot;carni\u0026quot;, \u0026quot;omni\u0026quot;, \u0026quot;herbi\u0026quot;, \u0026quot;omni\u0026quot;, \u0026quot;herbi\u0026quot;, \u0026quot;herbi...\r## $ order \u0026lt;chr\u0026gt; \u0026quot;Carnivora\u0026quot;, \u0026quot;Primates\u0026quot;, \u0026quot;Rodentia\u0026quot;, \u0026quot;Soricomorph...\r## $ conservation \u0026lt;chr\u0026gt; \u0026quot;lc\u0026quot;, NA, \u0026quot;nt\u0026quot;, \u0026quot;lc\u0026quot;, \u0026quot;domesticated\u0026quot;, NA, \u0026quot;vu\u0026quot;, N...\r## $ sleep_total \u0026lt;dbl\u0026gt; 12.1, 17.0, 14.4, 14.9, 4.0, 14.4, 8.7, 7.0, 10.1...\r## $ sleep_rem \u0026lt;dbl\u0026gt; NA, 1.8, 2.4, 2.3, 0.7, 2.2, 1.4, NA, 2.9, NA, 0....\r## $ sleep_cycle \u0026lt;dbl\u0026gt; NA, NA, NA, 0.1333333, 0.6666667, 0.7666667, 0.38...\r## $ awake \u0026lt;dbl\u0026gt; 11.9, 7.0, 9.6, 9.1, 20.0, 9.6, 15.3, 17.0, 13.9,...\r## $ brainwt \u0026lt;dbl\u0026gt; NA, 0.01550, NA, 0.00029, 0.42300, NA, NA, NA, 0....\r## $ bodywt \u0026lt;dbl\u0026gt; 50.000, 0.480, 1.350, 0.019, 600.000, 3.850, 20.4...\r\rfilter()\rEn muchos de los casos no es necesario considerar todas las filas de nuestros data.frame y solo deseamos enfocarnos en un grupo de estas. La función que nos permite recuperar filas especificas es filter().\rEl esquema general de esta función es:\rfilter(data.frame, condición)\nSelección de observaciones incluidas en variables numéricas\rSe puede seleccionar observaciones de variables numéricas con base en sus valores. Los operadores más usados para esta tarea son:\u0026gt;, \u0026gt;=, \u0026lt;, \u0026lt;=, == y !=.\nmsleep %\u0026gt;% select(name, sleep_total) %\u0026gt;% filter(sleep_total \u0026gt; 18)\r\r\rname\rsleep_total\r\r\r\rBig brown bat\r19.7\r\rThick-tailed opposum\r19.4\r\rLittle brown bat\r19.9\r\rGiant armadillo\r18.1\r\r\r\rSi deseas recuperar un rango de valores, es posible usar dos condiciones lógicas. Por ejemplo, si se desea seleccionar todos los animales cuyo tiempo de sueño total varía entre 15 y 18 horas, filter(sleep_total\u0026gt;=16, sleep_total \u0026lt;=18), una opción corta para cumplir con esta tarea es la función between().\nmsleep %\u0026gt;% select(name, sleep_total) %\u0026gt;% filter(between(sleep_total, 16, 18))\r\r\rname\rsleep_total\r\r\r\rOwl monkey\r17.0\r\rLong-nosed armadillo\r17.4\r\rNorth American Opossum\r18.0\r\rArctic ground squirrel\r16.6\r\r\r\rOtra función útil es near(), esta permite recuperar todos los elementos cercanos a un valor determinado. Esta función requiere que se especifique un valor de tolerancia, el cual indicara los límites de la selección. Se puede utilizar un valor predeterminado como valor de tolerancia: filter(near(sleep_total, 17, tol = .5)) esta recuperara todos los valores entre 16.5 y 17.5, o un valor que sea resultado de una función.\nEl siguiente ejemplo recupera todas las filas cuyos valores varían entre 17 +/- la desviación estándar (sd())de la variable tiempo total de sueño.\nmsleep %\u0026gt;% select(name, sleep_total) %\u0026gt;% filter(near(sleep_total, 17, tol = sd(sleep_total)))\r\r\rname\rsleep_total\r\r\r\rOwl monkey\r17.0\r\rMountain beaver\r14.4\r\rGreater short-tailed shrew\r14.9\r\rThree-toed sloth\r14.4\r\rLong-nosed armadillo\r17.4\r\rNorth American Opossum\r18.0\r\r\r\r\rSelección de observaciones en variables de tipo carácter\rSi deseas enfocarte en un grupo especio de animales, es necesario utilizar el operador ==.\nmsleep %\u0026gt;% select(order, name, sleep_total) %\u0026gt;% filter(order == \u0026quot;Didelphimorphia\u0026quot;)\r\r\rorder\rname\rsleep_total\r\r\r\rDidelphimorphia\rNorth American Opossum\r18.0\r\rDidelphimorphia\rThick-tailed opposum\r19.4\r\r\r\rOtros operadores usados:\nfilter(order != “Rodentia”) selecciona todas las observaciones diferentes a Rodentia.\nfilter(name \u0026gt; “v”) selecciona las observaciones cuyos nombres(name) inician con las letras que seguin a la “v”.\nSi deseas recuperar más de un elemento, el operador %in% permite realizar esta tarea. El siguiente ejemplo, selecciona las filas con información de animales pertenecientes a los órdenes Didelphimorphia y Diprotodontia.\nmsleep %\u0026gt;% select(order, name, sleep_total) %\u0026gt;% filter(order %in% c(\u0026quot;Didelphimorphia\u0026quot;, \u0026quot;Diprotodontia\u0026quot;))\r\r\rorder\rname\rsleep_total\r\r\r\rDidelphimorphia\rNorth American Opossum\r18.0\r\rDidelphimorphia\rThick-tailed opposum\r19.4\r\rDiprotodontia\rPhalanger\r13.7\r\rDiprotodontia\rPotoroo\r11.1\r\r\r\rTambién puedes usar el operador %in% para ignorar ciertos grupos. Para cumplir esta tarea se deberá agregar el operador ! negación como primer argumento de la función filter().\nremove \u0026lt;- c(\u0026quot;Rodentia\u0026quot;, \u0026quot;Carnivora\u0026quot;, \u0026quot;Primates\u0026quot;)\rmsleep %\u0026gt;% select(order, name, sleep_total) %\u0026gt;% filter(!order %in% remove)\r\r\rorder\rname\rsleep_total\r\r\r\rSoricomorpha\rGreater short-tailed shrew\r14.9\r\rArtiodactyla\rCow\r4.0\r\rPilosa\rThree-toed sloth\r14.4\r\rArtiodactyla\rRoe deer\r3.0\r\rArtiodactyla\rGoat\r5.3\r\rSoricomorpha\rStar-nosed mole\r10.3\r\r\r\r\rSelección de observaciones con base en múltiples condiciones\rLos ejemplos anteriores seleccionan las filas con base en una sola condición, pero filter() permite otros tipos de condiciónales:\n\rfilter(condición1, condición2) devolverá como resultado las filas que cumplan ambas condiciones.\n\rfilter(condición1, !condición2) obtendrá como resulta las filas para las cuales se cumple la condición uno mas no la condición dos.\n\rfilter(condición1 | condición2) retornara las filas que cumplan las dos condiciones.\n\rfilter(xor(condición1, condición2) obtendrá como resultado las filas en las que cumplan solo una de las condiciones.\n\r\rMúltiples condiciónales pueden ser combinados y, o y no. El ejemplo selecciona todas las filas en las cuales la variable bodywt es mayor a 100 y con un valor de la variable sleep_total mayor a 15 que no pertenezcan al orden Carnívora.\nmsleep %\u0026gt;%\rselect(name, order, sleep_total:bodywt) %\u0026gt;%\rfilter(bodywt \u0026gt; 100,\r(sleep_total \u0026gt; 15 | order != \u0026quot;Carnivora\u0026quot;))\r\r\rname\rorder\rsleep_total\rsleep_rem\rsleep_cycle\rawake\rbrainwt\rbodywt\r\r\r\rCow\rArtiodactyla\r4.0\r0.7\r0.6666667\r20.00\r0.423\r600.000\r\rAsian elephant\rProboscidea\r3.9\rNA\rNA\r20.10\r4.603\r2547.000\r\rHorse\rPerissodactyla\r2.9\r0.6\r1.0000000\r21.10\r0.655\r521.000\r\rDonkey\rPerissodactyla\r3.1\r0.4\rNA\r20.90\r0.419\r187.000\r\rGiraffe\rArtiodactyla\r1.9\r0.4\rNA\r22.10\rNA\r899.995\r\rPilot whale\rCetacea\r2.7\r0.1\rNA\r21.35\rNA\r800.000\r\rAfrican elephant\rProboscidea\r3.3\rNA\rNA\r20.70\r5.712\r6654.000\r\rTiger\rCarnivora\r15.8\rNA\rNA\r8.20\rNA\r162.564\r\rBrazilian tapir\rPerissodactyla\r4.4\r1.0\r0.9000000\r19.60\r0.169\r207.501\r\rBottle-nosed dolphin\rCetacea\r5.2\rNA\rNA\r18.80\rNA\r173.330\r\r\r\rxor()\nmsleep %\u0026gt;%\rselect(name, bodywt:brainwt) %\u0026gt;% filter(xor(bodywt \u0026gt; 100, brainwt \u0026gt; 1))\r\r\rname\rbodywt\rbrainwt\r\r\r\rCow\r600.000\r0.423\r\rHorse\r521.000\r0.655\r\rDonkey\r187.000\r0.419\r\rHuman\r62.000\r1.320\r\rBrazilian tapir\r207.501\r0.169\r\r\r\rEl operador negación(!):\nEl siguiente ejemplo devuelve las filas en las cuales la variable brainwt es mayor a 1, pero las variable bodywt no sea mayor a 100.\nmsleep %\u0026gt;% select(name, sleep_total, brainwt, bodywt) %\u0026gt;% filter(brainwt \u0026gt; 1, !bodywt \u0026gt; 100)\r\r\rname\rsleep_total\rbrainwt\rbodywt\r\r\r\rHuman\r8\r1.32\r62\r\r\r\r\rFiltrando las filas cuyas observaciones no contienen información (NA)\rSi buscamos ignorar las filas que no contienen información es necesario combinar: el operador ! y la función is.na(), para usarlo como un argumento de la función filter().\nEl siguiente ejemplo retira todas las filas de la variable conservation cuyo valor es NA.\nmsleep %\u0026gt;% select(name, conservation:sleep_cycle) %\u0026gt;% filter(!is.na(conservation))\r\r\rname\rconservation\rsleep_total\rsleep_rem\rsleep_cycle\r\r\r\rCheetah\rlc\r12.1\rNA\rNA\r\rMountain beaver\rnt\r14.4\r2.4\rNA\r\rGreater short-tailed shrew\rlc\r14.9\r2.3\r0.1333333\r\rCow\rdomesticated\r4.0\r0.7\r0.6666667\r\rNorthern fur seal\rvu\r8.7\r1.4\r0.3833333\r\rDog\rdomesticated\r10.1\r2.9\r0.3333333\r\r\r\r\rFiltros en múltiples columnas\rdplyr ofrece una serie de variantes de la función filter() que actúan sobre múltiples columnas:\n\rFilter_all actúa sobre todas las columnas.\rFilter_if y filter_at actúa sobre un grupo específico de columnas.\r\rEstas opciones tienen una formula general básica: primero es necesario especificar las columnas con las cuales se trabajara, seguida de la condición utilizada como filtro. En muchos casos será necesario el operador . como parte de la condición para hacer referencia los valores que estamos buscando.\n\rfilter_all()\rEl ejemplo selecciona todas las filas que contengan los caracteres Ca en los valores de cualquiera de las columnas.\nmsleep %\u0026gt;% select(name:order, sleep_total, -vore) %\u0026gt;% filter_all(any_vars(str_detect(., pattern = \u0026quot;Ca\u0026quot;)))\r## # A tibble: 16 x 4\r## name genus order sleep_total\r## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 Cheetah Acinonyx Carnivora 12.1\r## 2 Northern fur seal Callorhinus Carnivora 8.7\r## 3 Vesper mouse Calomys Rodentia 7 ## 4 Dog Canis Carnivora 10.1\r## 5 Roe deer Capreolus Artiodactyla 3 ## 6 Goat Capri Artiodactyla 5.3\r## 7 Guinea pig Cavis Rodentia 9.4\r## 8 Domestic cat Felis Carnivora 12.5\r## 9 Gray seal Haliochoerus Carnivora 6.2\r## 10 Tiger Panthera Carnivora 15.8\r## 11 Jaguar Panthera Carnivora 10.4\r## 12 Lion Panthera Carnivora 13.5\r## 13 Caspian seal Phoca Carnivora 3.5\r## 14 Genet Genetta Carnivora 6.3\r## 15 Arctic fox Vulpes Carnivora 12.5\r## 16 Red fox Vulpes Carnivora 9.8\rEl siguiente código selecciona todas las filas que contengan valores menores a 0.1:\nmsleep %\u0026gt;% select(name, sleep_total:bodywt) %\u0026gt;% filter_all(any_vars(. \u0026lt; 0.1))\r\r\rname\rsleep_total\rsleep_rem\rsleep_cycle\rawake\rbrainwt\rbodywt\r\r\r\rOwl monkey\r17.0\r1.8\rNA\r7.0\r0.01550\r0.480\r\rGreater short-tailed shrew\r14.9\r2.3\r0.1333333\r9.1\r0.00029\r0.019\r\rVesper mouse\r7.0\rNA\rNA\r17.0\rNA\r0.045\r\rDog\r10.1\r2.9\r0.3333333\r13.9\r0.07000\r14.000\r\rRoe deer\r3.0\rNA\rNA\r21.0\r0.09820\r14.800\r\rGuinea pig\r9.4\r0.8\r0.2166667\r14.6\r0.00550\r0.728\r\r\r\rEl comando any_vars() es equivalente a al condicional o, así el comando all_vars() es equivalente al condicional y.\nEl siguiente ejemplo devuelve todas las filas en las cuales los valores de sus observaciones sean mayores a 1.\nmsleep %\u0026gt;% select(name, sleep_total:bodywt, -awake) %\u0026gt;% filter_all(all_vars(. \u0026gt; 1))\r\r\rname\rsleep_total\rsleep_rem\rsleep_cycle\rbrainwt\rbodywt\r\r\r\rHuman\r8\r1.9\r1.5\r1.32\r62\r\r\r\r\rfilter_if()\rNos permite especificar sobre qué tipo de variables se aplicara la fusión. El siguiente ejemplo actúa únicamente sobre las filas de las variables de tipo carácter que no contengan información (NA).\nmsleep %\u0026gt;% select(name:order, sleep_total:sleep_rem) %\u0026gt;% filter_if(is.character, any_vars(is.na(.)))\r\r\rname\rgenus\rvore\rorder\rsleep_total\rsleep_rem\r\r\r\rVesper mouse\rCalomys\rNA\rRodentia\r7.0\rNA\r\rDesert hedgehog\rParaechinus\rNA\rErinaceomorpha\r10.3\r2.7\r\rDeer mouse\rPeromyscus\rNA\rRodentia\r11.5\rNA\r\rPhalanger\rPhalanger\rNA\rDiprotodontia\r13.7\r1.8\r\rRock hyrax\rProcavia\rNA\rHyracoidea\r5.4\r0.5\r\rMole rat\rSpalax\rNA\rRodentia\r10.6\r2.4\r\rMusk shrew\rSuncus\rNA\rSoricomorpha\r12.8\r2.0\r\r\r\rDe forma semejante es posible utilizar los siguientes funciones para especificar sobre qué tipo de variable actuara el filtro: is.numeric, is.integer, is.double, is.logical, is.factor, is.POSIXt o is.Date.\n\rfilter_at()\rUna de las funciones más útiles es filter_at(): es necesario seleccionar las columnas sobre las cuales actuara el filtro mediante el argumento vars(). El siguiente argumento es la condición mediante la cual se filtraran las filas, es posible usar all_vars() si la condición es cumplida en todas las columnas, o any_vars() si solo una de las variables cumple con la condición.\nPor ejemplo, el siguiente código actúa sobre las variables sleep_total y sleep_rem, seleccionando las filas si los valores de las observaciones de ambas variables son mayores a 5.\nmsleep %\u0026gt;% select(name, sleep_total:sleep_rem, brainwt:bodywt) %\u0026gt;% filter_at(vars(sleep_total, sleep_rem), all_vars(.\u0026gt;5))\r\r\rname\rsleep_total\rsleep_rem\rbrainwt\rbodywt\r\r\r\rThick-tailed opposum\r19.4\r6.6\rNA\r0.37\r\rGiant armadillo\r18.1\r6.1\r0.081\r60.00\r\r\r\rOtra forma de seleccionar las variables sobre las cuales actuara el filtro:\nmsleep %\u0026gt;% select(name, sleep_total:sleep_rem, brainwt:bodywt) %\u0026gt;% filter_at(vars(contains(\u0026quot;sleep\u0026quot;)), all_vars(.\u0026gt;5))\r\r\rname\rsleep_total\rsleep_rem\rbrainwt\rbodywt\r\r\r\rThick-tailed opposum\r19.4\r6.6\rNA\r0.37\r\rGiant armadillo\r18.1\r6.1\r0.081\r60.00\r\r\r\r\r\rReferencias:\rBasado en el tutorial de Suzan Baert: Data Wrangling Part 3: Basic and more advanced ways to filter rows\r\r\r","date":1542758400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1542758400,"objectID":"acd7e33b731725c1671db5186900f141","permalink":"/post/2018-11-20-data_wrangling_3/","publishdate":"2018-11-21T00:00:00Z","relpermalink":"/post/2018-11-20-data_wrangling_3/","section":"post","summary":"Esta es la tercera parte de la serie Data Wrangling.\nLas librerias:\rlibrary(tidyverse)\r\rLa base de datos:\rContinuaremos trabajando con la información contenida en la base de datos msleep. Con la finalidad de facilitar la reproductibilidad del código usado en este tutorial.\ndata(\u0026quot;msleep\u0026quot;)\rglimpse(msleep)\r## Observations: 83\r## Variables: 11\r## $ name \u0026lt;chr\u0026gt; \u0026quot;Cheetah\u0026quot;, \u0026quot;Owl monkey\u0026quot;, \u0026quot;Mountain beaver\u0026quot;, \u0026quot;Grea...\r## $ genus \u0026lt;chr\u0026gt; \u0026quot;Acinonyx\u0026quot;, \u0026quot;Aotus\u0026quot;, \u0026quot;Aplodontia\u0026quot;, \u0026quot;Blarina\u0026quot;, \u0026quot;Bo.","tags":["R Markdown","Data management"],"title":"Data Wrangling Part 3","type":"post"},{"authors":null,"categories":["R"],"content":"\rLa base de datos:\rLa base de datos que usaremos es msleep es pate del paquete ggplot2, trabajar con esta permitirá que el código puede ser reproducido con facilidad.\nPara conocer más de acerca de la base de datos msleep, se puede consultar (pdf) o se puede obtener la ayuda de R ?msleep\nUno de los primeros pasos cuando tenemos nuestros datos en R es evaluar la estructura de nuestra base de datos:\nglimpse(msleep)\r## Observations: 83\r## Variables: 11\r## $ name \u0026lt;chr\u0026gt; \u0026quot;Cheetah\u0026quot;, \u0026quot;Owl monkey\u0026quot;, \u0026quot;Mountain beaver\u0026quot;, \u0026quot;Grea...\r## $ genus \u0026lt;chr\u0026gt; \u0026quot;Acinonyx\u0026quot;, \u0026quot;Aotus\u0026quot;, \u0026quot;Aplodontia\u0026quot;, \u0026quot;Blarina\u0026quot;, \u0026quot;Bo...\r## $ vore \u0026lt;chr\u0026gt; \u0026quot;carni\u0026quot;, \u0026quot;omni\u0026quot;, \u0026quot;herbi\u0026quot;, \u0026quot;omni\u0026quot;, \u0026quot;herbi\u0026quot;, \u0026quot;herbi...\r## $ order \u0026lt;chr\u0026gt; \u0026quot;Carnivora\u0026quot;, \u0026quot;Primates\u0026quot;, \u0026quot;Rodentia\u0026quot;, \u0026quot;Soricomorph...\r## $ conservation \u0026lt;chr\u0026gt; \u0026quot;lc\u0026quot;, NA, \u0026quot;nt\u0026quot;, \u0026quot;lc\u0026quot;, \u0026quot;domesticated\u0026quot;, NA, \u0026quot;vu\u0026quot;, N...\r## $ sleep_total \u0026lt;dbl\u0026gt; 12.1, 17.0, 14.4, 14.9, 4.0, 14.4, 8.7, 7.0, 10.1...\r## $ sleep_rem \u0026lt;dbl\u0026gt; NA, 1.8, 2.4, 2.3, 0.7, 2.2, 1.4, NA, 2.9, NA, 0....\r## $ sleep_cycle \u0026lt;dbl\u0026gt; NA, NA, NA, 0.1333333, 0.6666667, 0.7666667, 0.38...\r## $ awake \u0026lt;dbl\u0026gt; 11.9, 7.0, 9.6, 9.1, 20.0, 9.6, 15.3, 17.0, 13.9,...\r## $ brainwt \u0026lt;dbl\u0026gt; NA, 0.01550, NA, 0.00029, 0.42300, NA, NA, NA, 0....\r## $ bodywt \u0026lt;dbl\u0026gt; 50.000, 0.480, 1.350, 0.019, 600.000, 3.850, 20.4...\r\rselect()\r\rSeleccionar una columna:\r\rPara seleccionar columnas solo necesitas incluir el nombre de la variable en la función select(—).\nmsleep %\u0026gt;% select(name) \r\r\rname\r\r\r\rCheetah\r\rOwl monkey\r\rMountain beaver\r\rGreater short-tailed shrew\r\rCow\r\rThree-toed sloth\r\r\r\r\rMultiples columnas:\r\rEsta función nos permite recuperar también múltiples columnas, el orden en el que los nombres de estas sean ingresados determinara el orden en el resultado.\nmsleep %\u0026gt;%\rselect(name, genus, sleep_total, awake) \r\r\rname\rgenus\rsleep_total\rawake\r\r\r\rCheetah\rAcinonyx\r12.1\r11.9\r\rOwl monkey\rAotus\r17.0\r7.0\r\rMountain beaver\rAplodontia\r14.4\r9.6\r\rGreater short-tailed shrew\rBlarina\r14.9\r9.1\r\rCow\rBos\r4.0\r20.0\r\rThree-toed sloth\rBradypus\r14.4\r9.6\r\r\r\r\rSecuencias:\r\rSe puede recuperar múltiples columnas sucesivas con la ayuda del operador :. Considerando la siguiente estructura: columna_inicial:columna_final.\nmsleep %\u0026gt;%\rselect(name:conservation) \r\r\rname\rgenus\rvore\rorder\rconservation\r\r\r\rCheetah\rAcinonyx\rcarni\rCarnivora\rlc\r\rOwl monkey\rAotus\romni\rPrimates\rNA\r\rMountain beaver\rAplodontia\rherbi\rRodentia\rnt\r\rGreater short-tailed shrew\rBlarina\romni\rSoricomorpha\rlc\r\rCow\rBos\rherbi\rArtiodactyla\rdomesticated\r\rThree-toed sloth\rBradypus\rherbi\rPilosa\rNA\r\r\r\r\rOtra opción es ignorar columnas especificas o secuencias, esto se puede lograr con la ayuda del operador -, el cual se antepone al nombre de la columna(as) que se desea ignorar.\r\rmsleep %\u0026gt;% select(-conservation, -(sleep_total:awake))\r\r\rname\rgenus\rvore\rorder\rbrainwt\rbodywt\r\r\r\rCheetah\rAcinonyx\rcarni\rCarnivora\rNA\r50.000\r\rOwl monkey\rAotus\romni\rPrimates\r0.01550\r0.480\r\rMountain beaver\rAplodontia\rherbi\rRodentia\rNA\r1.350\r\rGreater short-tailed shrew\rBlarina\romni\rSoricomorpha\r0.00029\r0.019\r\rCow\rBos\rherbi\rArtiodactyla\r0.42300\r600.000\r\rThree-toed sloth\rBradypus\rherbi\rPilosa\rNA\r3.850\r\r\r\rEs posible deseleccionar una secuencia completa y recuperar una columna que esté incluida en esta.\n\rEl siguiente ejemplo deselecciona la secuencia de columnas comprendidas entre name y awake, pero recupera la columna conservation. Esta opción solo funciona si se incluye el nombre de la columna a recuperar en la misma acción que elimina las otras columnas.\r\rmsleep %\u0026gt;%\rselect(-(name:awake), conservation) \r\r\rbrainwt\rbodywt\rconservation\r\r\r\rNA\r50.000\rlc\r\r0.01550\r0.480\rNA\r\rNA\r1.350\rnt\r\r0.00029\r0.019\rlc\r\r0.42300\r600.000\rdomesticated\r\rNA\r3.850\rNA\r\r\r\r\rone_of():\r\rEsta función requiere de preparación, es posible que cuando la base de datos contenga un gran número de variables estas mantengan alguna relación que nos permita agruparlas.\r\rLa base de datos msleep se conforma de 11 variables:\n# Variables categóricas.\rclassification_info \u0026lt;- c(\u0026quot;name\u0026quot;, \u0026quot;genus\u0026quot;, \u0026quot;vore\u0026quot;, \u0026quot;order\u0026quot;, \u0026quot;conservation\u0026quot;)\r# Variables Numéricas, relacionadas al tiempo de sueño. sleep_cols \u0026lt;- c(\u0026quot;sleep_total\u0026quot;, \u0026quot;sleep_rem\u0026quot;, \u0026quot;sleep_cycle\u0026quot;)\r# Variables Numéricas, relacionadas con el peso.\rweight_cols \u0026lt;- c(\u0026quot;brainwt\u0026quot;, \u0026quot;bodywt\u0026quot;)\r\rLa función one_of(),nos permitirá evitar los errores al digitar los nombres de las variables en múltiples ocasiones, con la siguiente formula: select(one_of(variable)).\nEl argumento variable es el vector que creamos agrupando las variables.\nmsleep %\u0026gt;%\rselect(one_of(sleep_cols))\r\r\rsleep_total\rsleep_rem\rsleep_cycle\r\r\r\r12.1\rNA\rNA\r\r17.0\r1.8\rNA\r\r14.4\r2.4\rNA\r\r14.9\r2.3\r0.1333333\r\r4.0\r0.7\r0.6666667\r\r14.4\r2.2\r0.7666667\r\r\r\r\rSelección de columnas, usando parte de los nombres\rSi la base de datos está conformada por muchas columnas cuyos nombres tienen estructuras similares, puedes usar funciones de selección parcial: starts_with(), ends_with() or contains() en conjunto con select() dependiendo de lo que buscas recuperar.\nmsleep %\u0026gt;%\rselect(name, starts_with(\u0026quot;sleep\u0026quot;)) \r\r\rname\rsleep_total\rsleep_rem\rsleep_cycle\r\r\r\rCheetah\r12.1\rNA\rNA\r\rOwl monkey\r17.0\r1.8\rNA\r\rMountain beaver\r14.4\r2.4\rNA\r\rGreater short-tailed shrew\r14.9\r2.3\r0.1333333\r\rCow\r4.0\r0.7\r0.6666667\r\rThree-toed sloth\r14.4\r2.2\r0.7666667\r\r\r\rmsleep %\u0026gt;%\rselect(contains(\u0026quot;eep\u0026quot;), ends_with(\u0026quot;wt\u0026quot;)) \r\r\rsleep_total\rsleep_rem\rsleep_cycle\rbrainwt\rbodywt\r\r\r\r12.1\rNA\rNA\rNA\r50.000\r\r17.0\r1.8\rNA\r0.01550\r0.480\r\r14.4\r2.4\rNA\rNA\r1.350\r\r14.9\r2.3\r0.1333333\r0.00029\r0.019\r\r4.0\r0.7\r0.6666667\r0.42300\r600.000\r\r14.4\r2.2\r0.7666667\rNA\r3.850\r\r\r\rmsleep %\u0026gt;%\rselect(name, ends_with(\u0026quot;e\u0026quot;))\r\r\rname\rvore\rsleep_cycle\rawake\r\r\r\rCheetah\rcarni\rNA\r11.9\r\rOwl monkey\romni\rNA\r7.0\r\rMountain beaver\rherbi\rNA\r9.6\r\rGreater short-tailed shrew\romni\r0.1333333\r9.1\r\rCow\rherbi\r0.6666667\r20.0\r\rThree-toed sloth\rherbi\r0.7666667\r9.6\r\r\r\r\rSelección con base en el tipo datos\rLa función select_if permite usar funciones is.numeric, is.integer, is.double, is.logical, is.factor. Por ejemplo deseas recuperar todas las columnas de tipo carácter (secuencias de texto) puedes usar select_if(is.character).\nSi la base de datos contiene columnas de tipo date, será necesario usar funciones del paquete lubridate como is.Date o is.POSIXt.\nmsleep %\u0026gt;%\rselect_if(is.numeric) \r\r\rsleep_total\rsleep_rem\rsleep_cycle\rawake\rbrainwt\rbodywt\r\r\r\r12.1\rNA\rNA\r11.9\rNA\r50.000\r\r17.0\r1.8\rNA\r7.0\r0.01550\r0.480\r\r14.4\r2.4\rNA\r9.6\rNA\r1.350\r\r14.9\r2.3\r0.1333333\r9.1\r0.00029\r0.019\r\r4.0\r0.7\r0.6666667\r20.0\r0.42300\r600.000\r\r14.4\r2.2\r0.7666667\r9.6\rNA\r3.850\r\r\r\rTambién puedes seleccionar columnas usando negaciones, pero será necesario añadir el operador tilde ~.\nmsleep %\u0026gt;%\rselect_if(~!is.numeric(.)) \r\r\rname\rgenus\rvore\rorder\rconservation\r\r\r\rCheetah\rAcinonyx\rcarni\rCarnivora\rlc\r\rOwl monkey\rAotus\romni\rPrimates\rNA\r\rMountain beaver\rAplodontia\rherbi\rRodentia\rnt\r\rGreater short-tailed shrew\rBlarina\romni\rSoricomorpha\rlc\r\rCow\rBos\rherbi\rArtiodactyla\rdomesticated\r\rThree-toed sloth\rBradypus\rherbi\rPilosa\rNA\r\r\r\rSelección de columnas usando expresiones lógicas\rselect_if permite seleccionar columnas con base en cualquier función lógica, no únicamente con base el tipo de datos. Así es posible seleccionar todas las columnas con un promedio mayor a 500. Para evitar errores será necesario seleccionar primero solo las columnas de tipo numérico.\nSe debe tomar en cuenta que mean \u0026gt; 500 no es una función, para que esta sea una función se debe anteponer el operador tilde ~, para que esta sea reconocido como una función.\nmsleep %\u0026gt;%\rselect_if(~is.numeric(.)) %\u0026gt;%\rselect_if(~mean(., na.rm=TRUE) \u0026gt; 10)\r\r\rsleep_total\rawake\rbodywt\r\r\r\r12.1\r11.9\r50.000\r\r17.0\r7.0\r0.480\r\r14.4\r9.6\r1.350\r\r14.9\r9.1\r0.019\r\r4.0\r20.0\r600.000\r\r14.4\r9.6\r3.850\r\r\r\r\rn_distinct()\r\rUna función muy útil para select_if() es n_distinct(), esta función permite conocer el cuantos elementos diferentes están presentes en una columna. Para recuperar las columnas que tienen menos de 10 elementos distintos usaremos ~n_distinct(.) \u0026lt; 10 como argumento de la función select_if. Dado que n_distinct(.) \u0026lt; 10 no es una función, es necesario anteponer el operador ~.\nmsleep %\u0026gt;%\rselect_if(~n_distinct(.) \u0026lt; 10)\r\r\rvore\rconservation\r\r\r\rcarni\rlc\r\romni\rNA\r\rherbi\rnt\r\romni\rlc\r\rherbi\rdomesticated\r\rherbi\rNA\r\r\r\r\rReordenamiento de Columnas\rPodemos usar select() para reordenar columnas. El orden en el cual incluyas los nombres en esta función determina su orden final.\nmsleep %\u0026gt;%\rselect(conservation, sleep_total, name)\r\r\rconservation\rsleep_total\rname\r\r\r\rlc\r12.1\rCheetah\r\rNA\r17.0\rOwl monkey\r\rnt\r14.4\rMountain beaver\r\rlc\r14.9\rGreater short-tailed shrew\r\rdomesticated\r4.0\rCow\r\rNA\r14.4\rThree-toed sloth\r\r\r\r\reverything()\r\rSi deseas mover solo algunas columnas hacia el frente, puedes usar everything() después de estas y esto añadirá las columnas restantes al final.\nmsleep %\u0026gt;%\rselect(conservation, sleep_total, everything())\r\r\rconservation\rsleep_total\rname\rgenus\rvore\rorder\rsleep_rem\rsleep_cycle\rawake\rbrainwt\rbodywt\r\r\r\rlc\r12.1\rCheetah\rAcinonyx\rcarni\rCarnivora\rNA\rNA\r11.9\rNA\r50.000\r\rNA\r17.0\rOwl monkey\rAotus\romni\rPrimates\r1.8\rNA\r7.0\r0.01550\r0.480\r\rnt\r14.4\rMountain beaver\rAplodontia\rherbi\rRodentia\r2.4\rNA\r9.6\rNA\r1.350\r\rlc\r14.9\rGreater short-tailed shrew\rBlarina\romni\rSoricomorpha\r2.3\r0.1333333\r9.1\r0.00029\r0.019\r\rdomesticated\r4.0\rCow\rBos\rherbi\rArtiodactyla\r0.7\r0.6666667\r20.0\r0.42300\r600.000\r\rNA\r14.4\rThree-toed sloth\rBradypus\rherbi\rPilosa\r2.2\r0.7666667\r9.6\rNA\r3.850\r\r\r\r\rModificando los nombres de las columnas\rEn ocasiones es necesario modificar los nombres de las columnas.\nCambiar el nombre de las columnas\n\rselect() permite modificar el nombre de las columnas .\r\rmsleep %\u0026gt;%\rselect(animal = name, sleep_total, riesgo = conservation) \r\r\ranimal\rsleep_total\rriesgo\r\r\r\rCheetah\r12.1\rlc\r\rOwl monkey\r17.0\rNA\r\rMountain beaver\r14.4\rnt\r\rGreater short-tailed shrew\r14.9\rlc\r\r\r\r\rSi deseas conservar todas las columnas se puede usar la función rename().\r\rmsleep %\u0026gt;% rename(animal = name, extinction_threat = conservation) \r\r\ranimal\rgenus\rvore\rorder\rextinction_threat\rsleep_total\rsleep_rem\rsleep_cycle\rawake\rbrainwt\rbodywt\r\r\r\rCheetah\rAcinonyx\rcarni\rCarnivora\rlc\r12.1\rNA\rNA\r11.9\rNA\r50.000\r\rOwl monkey\rAotus\romni\rPrimates\rNA\r17.0\r1.8\rNA\r7.0\r0.01550\r0.480\r\rMountain beaver\rAplodontia\rherbi\rRodentia\rnt\r14.4\r2.4\rNA\r9.6\rNA\r1.350\r\rGreater short-tailed shrew\rBlarina\romni\rSoricomorpha\rlc\r14.9\r2.3\r0.1333333\r9.1\r0.00029\r0.019\r\r\r\rModificando el nombre de todas las columnas\n\rselect_all()\r\rLa función select_all() permite modificar todos los nombres de las columnas, usando como argumento otra función.\nMediante la función toupper()se puede modificar el nombre de las columnas con letras mayúscula y la función tolower() modifica el nombre de las columnas en letras minúsculas.\nmsleep %\u0026gt;%\rselect_all(toupper)\r\r\rNAME\rGENUS\rVORE\rORDER\rCONSERVATION\rSLEEP_TOTAL\rSLEEP_REM\rSLEEP_CYCLE\rAWAKE\rBRAINWT\rBODYWT\r\r\r\rCheetah\rAcinonyx\rcarni\rCarnivora\rlc\r12.1\rNA\rNA\r11.9\rNA\r50.000\r\rOwl monkey\rAotus\romni\rPrimates\rNA\r17.0\r1.8\rNA\r7.0\r0.01550\r0.480\r\rMountain beaver\rAplodontia\rherbi\rRodentia\rnt\r14.4\r2.4\rNA\r9.6\rNA\r1.350\r\rGreater short-tailed shrew\rBlarina\romni\rSoricomorpha\rlc\r14.9\r2.3\r0.1333333\r9.1\r0.00029\r0.019\r\r\r\r\rPasar los nombres de las filas a una columna\rAlgunos dataframes tienen nombres para cada una de las columnas que no se reconocen como una columna en su estructura. Un ejemplo es la base de datos mtcars.\n mtcars %\u0026gt;%\rhead() \r\r\r\rmpg\rcyl\rdisp\rhp\rdrat\rwt\rqsec\rvs\ram\rgear\rcarb\r\r\r\rMazda RX4\r21.0\r6\r160\r110\r3.90\r2.620\r16.46\r0\r1\r4\r4\r\rMazda RX4 Wag\r21.0\r6\r160\r110\r3.90\r2.875\r17.02\r0\r1\r4\r4\r\rDatsun 710\r22.8\r4\r108\r93\r3.85\r2.320\r18.61\r1\r1\r4\r1\r\rHornet 4 Drive\r21.4\r6\r258\r110\r3.08\r3.215\r19.44\r1\r0\r3\r1\r\rHornet Sportabout\r18.7\r8\r360\r175\r3.15\r3.440\r17.02\r0\r0\r3\r2\r\rValiant\r18.1\r6\r225\r105\r2.76\r3.460\r20.22\r1\r0\r3\r1\r\r\r\rLa función rownames_to_column() permite recuperar estos nombres he incluirlos creando una nueva columna.\n mtcars %\u0026gt;%\rrownames_to_column(\u0026quot;car_model\u0026quot;) \r\r\rcar_model\rmpg\rcyl\rdisp\rhp\rdrat\rwt\rqsec\rvs\ram\rgear\rcarb\r\r\r\rMazda RX4\r21.0\r6\r160\r110\r3.90\r2.620\r16.46\r0\r1\r4\r4\r\rMazda RX4 Wag\r21.0\r6\r160\r110\r3.90\r2.875\r17.02\r0\r1\r4\r4\r\rDatsun 710\r22.8\r4\r108\r93\r3.85\r2.320\r18.61\r1\r1\r4\r1\r\rHornet 4 Drive\r21.4\r6\r258\r110\r3.08\r3.215\r19.44\r1\r0\r3\r1\r\rHornet Sportabout\r18.7\r8\r360\r175\r3.15\r3.440\r17.02\r0\r0\r3\r2\r\rValiant\r18.1\r6\r225\r105\r2.76\r3.460\r20.22\r1\r0\r3\r1\r\r\r\r\rReferencias:\rBasado en el tutorial de Suzan Baert: Data Wrangling Part 1: Basic to Advanced Ways to Select Columns\r\r\r\r","date":1541980800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1541980800,"objectID":"44451c39e4a1d665954f3f4c5750e997","permalink":"/post/2018-11-12-data_wrangling_1/","publishdate":"2018-11-12T00:00:00Z","relpermalink":"/post/2018-11-12-data_wrangling_1/","section":"post","summary":"La base de datos:\rLa base de datos que usaremos es msleep es pate del paquete ggplot2, trabajar con esta permitirá que el código puede ser reproducido con facilidad.\nPara conocer más de acerca de la base de datos msleep, se puede consultar (pdf) o se puede obtener la ayuda de R ?msleep\nUno de los primeros pasos cuando tenemos nuestros datos en R es evaluar la estructura de nuestra base de datos:","tags":["R Markdown","Data management"],"title":"Data Wrangling Part 1","type":"post"},{"authors":null,"categories":["R"],"content":"\rLa base de datos:\rContinuaremos usando trabajando con la base de datos msleep, para facilitar la reproductibilidad y experimentacion del codigo.\nlibrary(tidyverse)\rglimpse(msleep)\r## Observations: 83\r## Variables: 11\r## $ name \u0026lt;chr\u0026gt; \u0026quot;Cheetah\u0026quot;, \u0026quot;Owl monkey\u0026quot;, \u0026quot;Mountain beaver\u0026quot;, \u0026quot;Grea...\r## $ genus \u0026lt;chr\u0026gt; \u0026quot;Acinonyx\u0026quot;, \u0026quot;Aotus\u0026quot;, \u0026quot;Aplodontia\u0026quot;, \u0026quot;Blarina\u0026quot;, \u0026quot;Bo...\r## $ vore \u0026lt;chr\u0026gt; \u0026quot;carni\u0026quot;, \u0026quot;omni\u0026quot;, \u0026quot;herbi\u0026quot;, \u0026quot;omni\u0026quot;, \u0026quot;herbi\u0026quot;, \u0026quot;herbi...\r## $ order \u0026lt;chr\u0026gt; \u0026quot;Carnivora\u0026quot;, \u0026quot;Primates\u0026quot;, \u0026quot;Rodentia\u0026quot;, \u0026quot;Soricomorph...\r## $ conservation \u0026lt;chr\u0026gt; \u0026quot;lc\u0026quot;, NA, \u0026quot;nt\u0026quot;, \u0026quot;lc\u0026quot;, \u0026quot;domesticated\u0026quot;, NA, \u0026quot;vu\u0026quot;, N...\r## $ sleep_total \u0026lt;dbl\u0026gt; 12.1, 17.0, 14.4, 14.9, 4.0, 14.4, 8.7, 7.0, 10.1...\r## $ sleep_rem \u0026lt;dbl\u0026gt; NA, 1.8, 2.4, 2.3, 0.7, 2.2, 1.4, NA, 2.9, NA, 0....\r## $ sleep_cycle \u0026lt;dbl\u0026gt; NA, NA, NA, 0.1333333, 0.6666667, 0.7666667, 0.38...\r## $ awake \u0026lt;dbl\u0026gt; 11.9, 7.0, 9.6, 9.1, 20.0, 9.6, 15.3, 17.0, 13.9,...\r## $ brainwt \u0026lt;dbl\u0026gt; NA, 0.01550, NA, 0.00029, 0.42300, NA, NA, NA, 0....\r## $ bodywt \u0026lt;dbl\u0026gt; 50.000, 0.480, 1.350, 0.019, 600.000, 3.850, 20.4...\r\rmutate()\r\rComo crear y transformar columnas:\r\rSe puede crear columnas nuevas con la función mutate(). Las posibilidades dentro de esta función son innumerables, si la acción es aplicable a un vector normal puede ser realizada mediante esta función.\nmutate() permite crear nuevas columnas (asignando un nombre nuevo a la columna), o reemplazar una columna existente (si se conserva el nombre).\nLa operación más básica para crear columnas nuevas, es realizar cálculos usando los valores de otra columna. Por ejemplo, podemos calcular el peso del cerebro en gramos.\nmsleep %\u0026gt;%\rselect(name, sleep_total) %\u0026gt;%\rmutate(sleep_total_min = sleep_total * 60)\r\r\rname\rsleep_total\rsleep_total_min\r\r\r\rCheetah\r12.1\r726\r\rOwl monkey\r17.0\r1020\r\rMountain beaver\r14.4\r864\r\rGreater short-tailed shrew\r14.9\r894\r\rCow\r4.0\r240\r\rThree-toed sloth\r14.4\r864\r\r\r\rLas columnas nuevas pueden construirse usando como argumentos los resultados de funciones conglomerantes promedio (mean()), mediana (median()), máximo (max()), mínimo (min()), ….\nEl siguiente ejemplo crea dos columnas nuevas: una muestra la diferencia de cada una de las observaciones respecto al tiempo de sueño promedio, la otra columna muestra la diferencia entre cada una de las observaciones y la observación con el valor mínimo.\nmsleep %\u0026gt;%\rselect(name, sleep_total) %\u0026gt;%\rmutate(\rsleep_total_vs_AVG = sleep_total - round(mean(sleep_total), 1),\rsleep_total_vs_MIN = sleep_total - min(sleep_total)\r)\r\r\rname\rsleep_total\rsleep_total_vs_AVG\rsleep_total_vs_MIN\r\r\r\rCheetah\r12.1\r1.7\r10.2\r\rOwl monkey\r17.0\r6.6\r15.1\r\rMountain beaver\r14.4\r4.0\r12.5\r\rGreater short-tailed shrew\r14.9\r4.5\r13.0\r\rCow\r4.0\r-6.4\r2.1\r\rThree-toed sloth\r14.4\r4.0\r12.5\r\r\r\rSi buscas aplicar funciones sobre múltiples columnas, es necesario agregar una función adicional a la línea de código que permita que la función tome como argumento los valores de cada una de las filas. ?rowwise().\nmsleep %\u0026gt;%\rselect(name, contains(\u0026quot;sleep\u0026quot;)) %\u0026gt;%\rrowwise() %\u0026gt;%\rmutate(avg = mean(c(sleep_rem, sleep_cycle))) %\u0026gt;% ungroup()\r\r\rname\rsleep_total\rsleep_rem\rsleep_cycle\ravg\r\r\r\rCheetah\r12.1\rNA\rNA\rNA\r\rOwl monkey\r17.0\r1.8\rNA\rNA\r\rMountain beaver\r14.4\r2.4\rNA\rNA\r\rGreater short-tailed shrew\r14.9\r2.3\r0.1333333\r1.2166667\r\rCow\r4.0\r0.7\r0.6666667\r0.6833333\r\rThree-toed sloth\r14.4\r2.2\r0.7666667\r1.4833333\r\r\r\rLa función ifelse() es muy útil si se busca modificar los datos de una columna de acuerdo a una condición. Esta función toma como primer argumento un condicional lógico; el segundo argumento determina la acción a realizarse, si el resultado del condicional es verdadero (TRUE) y el tercer argumento especifica la acción en caso el condicional sea falso (FALSE).\nImagines que la base de datos contiene dos valores atípicos y deseamos excluir estos. El siguiente ejemplo evalúa la variable brainwt y crea la variable brainwt2 en la cual remplaza todo valor mayor a 4 con NA.\nmsleep %\u0026gt;%\rselect(name, brainwt) %\u0026gt;%\rmutate(brainwt2 = ifelse(brainwt \u0026gt; 4, NA, brainwt)) %\u0026gt;%\rarrange(desc(brainwt))\r\r\rname\rbrainwt\rbrainwt2\r\r\r\rAfrican elephant\r5.712\rNA\r\rAsian elephant\r4.603\rNA\r\rHuman\r1.320\r1.320\r\rHorse\r0.655\r0.655\r\rChimpanzee\r0.440\r0.440\r\rCow\r0.423\r0.423\r\r\r\r\rModificar múltiples columnas al mismo tiempo:\r\rLas variantes de la función mutate() permiten ampliar nuestras habilidades para modificar o crear nuevas columnas:\n\rmutate_all()\rLa variante mutate_all() es la más simple. Solo es necesario usar como argumento la función que deseas aplicar sobre las columnas.\nPor ejemplo: Podemos modificar todas las observaciones de almacenadas el variables de tipo carácter que combinan mayúsculas y minúsculas, a mayúsculas únicamente.\nmsleep %\u0026gt;%\rselect_if(~is.character(.)) %\u0026gt;% mutate_all(toupper)\r\r\rname\rgenus\rvore\rorder\rconservation\r\r\r\rCHEETAH\rACINONYX\rCARNI\rCARNIVORA\rLC\r\rOWL MONKEY\rAOTUS\rOMNI\rPRIMATES\rNA\r\rMOUNTAIN BEAVER\rAPLODONTIA\rHERBI\rRODENTIA\rNT\r\rGREATER SHORT-TAILED SHREW\rBLARINA\rOMNI\rSORICOMORPHA\rLC\r\rCOW\rBOS\rHERBI\rARTIODACTYLA\rDOMESTICATED\r\rTHREE-TOED SLOTH\rBRADYPUS\rHERBI\rPILOSA\rNA\r\r\r\r\rmutate_if()\rNo todas las tareas de modificación y ordenamiento de datos pueden ser realizadas mediante mutate_all(). Por ejemplo si queremos utilizar la función round() como argumento de muatate_all(), tendremos como resultado un error. Esto debido a que la base de datos contiene variables de tipo carácter y numérico.\nmsleep %\u0026gt;%\rmutate_all(round)\rError in mutate_impl(.data, dots) : Evaluation error: non-numeric argument to mathematical function.\nEn este caso es necesario agregar una condicional que evalué si los datos son de tipo numérico antes de que la función round() sea aplicada, esta tarea puede ser desarrollada mediante la función mutate_if().\nLa función mutate_if() necesita dos argumentos:\n\rPrimero es necesario obtener información de las columnas que se desean considerar. Esta información es dada por una función que retorna valores lógicos: is.numeric, is.integer, is.double, is.logical, is.factor, lubridate::is.POSIXt o lubridate::is.Date.\n\rEl siguiente argumento, son las instrucciones de modificación de los datos en forma de función.\n\r\rmsleep %\u0026gt;%\rselect(name, sleep_total:bodywt) %\u0026gt;%\rmutate_if(is.numeric, round)\r\r\rname\rsleep_total\rsleep_rem\rsleep_cycle\rawake\rbrainwt\rbodywt\r\r\r\rCheetah\r12\rNA\rNA\r12\rNA\r50\r\rOwl monkey\r17\r2\rNA\r7\r0\r0\r\rMountain beaver\r14\r2\rNA\r10\rNA\r1\r\rGreater short-tailed shrew\r15\r2\r0\r9\r0\r0\r\rCow\r4\r1\r1\r20\r0\r600\r\rThree-toed sloth\r14\r2\r1\r10\rNA\r4\r\r\r\r\rmutate_at()\rLa funcion mutate_at() permite modificar columnas especificas, esta necesita los siguientes argumentos:\n\rEs necesario determinara las columnas que seran consideradas. Las variantes de la la funcion select() ayudan con esta tarea, adicionalmente se tiene la funcion vars().\n\rEl siguiente elemento de la funcion, sera las instruciones de modificacion.\n\r\rPor ejemplo, las mediciones de tiempo de sueño están expresadas en horas, pero queremos mostrarlas en minutos. Se puede usar la función mutate_at(), primero utilizaremos las funciones vars() y contains() para seleccionar las columnas. Para culminar la tarea es necesario construir una función anónima con ayuda de funs(), la cual que permita multiplicar cada valor por 60.\nmsleep %\u0026gt;%\rselect(name, sleep_total:awake) %\u0026gt;%\rmutate_at(vars(contains(\u0026quot;sleep\u0026quot;)), ~(.*60))\r\r\rname\rsleep_total\rsleep_rem\rsleep_cycle\rawake\r\r\r\rCheetah\r726\rNA\rNA\r11.9\r\rOwl monkey\r1020\r108\rNA\r7.0\r\rMountain beaver\r864\r144\rNA\r9.6\r\rGreater short-tailed shrew\r894\r138\r8\r9.1\r\rCow\r240\r42\r40\r20.0\r\rThree-toed sloth\r864\r132\r46\r9.6\r\r\r\r\rCambio de nombres de las columnas después de la modificación de sus valores\r\rLa función mutate(), permite modificar los nombres de las columnas en un solo paso.\rEn el ejemplo anterior pude llevar a confusiones la modificación de las unidades que realizamos, podemos modificar el nombre de las columnas añadiendo esta información mediante la función rename.\nmsleep %\u0026gt;%\rselect(name, sleep_total:awake) %\u0026gt;%\rmutate_at(vars(contains(\u0026quot;sleep\u0026quot;)), ~(.*60)) %\u0026gt;% rename_at(vars(contains(\u0026quot;sleep\u0026quot;)), ~paste0(.,\u0026quot;_min\u0026quot;))\rmsleep %\u0026gt;%\rselect(name, sleep_total:awake) %\u0026gt;%\rmutate_at(vars(contains(\u0026quot;sleep\u0026quot;)), ~(.*60)) %\u0026gt;% rename_at(vars(contains(\u0026quot;sleep\u0026quot;)), ~paste0(.,\u0026quot;_min\u0026quot;)) %\u0026gt;% head() %\u0026gt;% kable()\r\r\rname\rsleep_total_min\rsleep_rem_min\rsleep_cycle_min\rawake\r\r\r\rCheetah\r726\rNA\rNA\r11.9\r\rOwl monkey\r1020\r108\rNA\r7.0\r\rMountain beaver\r864\r144\rNA\r9.6\r\rGreater short-tailed shrew\r894\r138\r8\r9.1\r\rCow\r240\r42\r40\r20.0\r\rThree-toed sloth\r864\r132\r46\r9.6\r\r\r\rO como lo señaló Tomas McManus: se puede asignar una “etiqueta” dentro de la función funs () la cual se agregará al nombre actual. El resultado obtenido mediante la función funs () agrega las columnas nuevas en lugar de reemplazarlas. Esto es útil dependiendo de los objetivos del análisis que se esté desarrollando.\nmsleep %\u0026gt;%\rselect(name, sleep_total:awake) %\u0026gt;%\rmutate_at(vars(contains(\u0026quot;sleep\u0026quot;)), funs(min = .*60))\r\r\rname\rsleep_total\rsleep_rem\rsleep_cycle\rawake\rsleep_total_min\rsleep_rem_min\rsleep_cycle_min\r\r\r\rCheetah\r12.1\rNA\rNA\r11.9\r726\rNA\rNA\r\rOwl monkey\r17.0\r1.8\rNA\r7.0\r1020\r108\rNA\r\rMountain beaver\r14.4\r2.4\rNA\r9.6\r864\r144\rNA\r\rGreater short-tailed shrew\r14.9\r2.3\r0.1333333\r9.1\r894\r138\r8\r\rCow\r4.0\r0.7\r0.6666667\r20.0\r240\r42\r40\r\rThree-toed sloth\r14.4\r2.2\r0.7666667\r9.6\r864\r132\r46\r\r\r\r\rColumnas de tipo caracter\r\r\rrecode()\rEn ocasiones es necesario modificar los valores de las variables discretas, la función recode() puede ser utilizada como un argumento de mutate() para cumplir la tarea de modificar los niveles de una variable o agregarlos en un menor número de niveles.\nLa opción .default hace referencia a todos los valores que no son considerados por los niveles especificados, excepto NA. Se puede modificar los valores NA mediante la opción .missing.\nmsleep %\u0026gt;%\rmutate(conservation2 = recode(conservation,\r\u0026quot;en\u0026quot; = \u0026quot;Peligro de extincion\u0026quot;,\r\u0026quot;lc\u0026quot; = \u0026quot;Riesgo menor\u0026quot;,\r\u0026quot;domesticated\u0026quot; = \u0026quot;Riesgo menor\u0026quot;,\r.default = \u0026quot;No conocido\u0026quot;,\r.missing = \u0026quot;Falta informacion\u0026quot;)) %\u0026gt;%\rcount(conservation2)\r\r\rconservation2\rn\r\r\r\rFalta informacion\r29\r\rNo conocido\r13\r\rPeligro de extincion\r4\r\rRiesgo menor\r37\r\r\r\rrecode() tiene una variante especial para determinar que las variables sean consideradas de tipo factor recode_factor(). En esta función la opción .ordered por defecto es FALSE, para obtener una secuencia de los niveles de un factor esta debe ser modificada a TRUE:\nmsleep %\u0026gt;%\rmutate(conservation2 = recode_factor(conservation,\r\u0026quot;en\u0026quot; = \u0026quot;Peligro de extincion\u0026quot;,\r\u0026quot;lc\u0026quot; = \u0026quot;Riesgo menor\u0026quot;,\r\u0026quot;domesticated\u0026quot; = \u0026quot;Riesgo menor\u0026quot;,\r.default = \u0026quot;No conocido\u0026quot;,\r.missing = \u0026quot;Falta informacion\u0026quot;,\r.ordered = TRUE)) %\u0026gt;%\rcount(conservation2)\r\r\rconservation2\rn\r\r\r\rPeligro de extincion\r4\r\rRiesgo menor\r37\r\rNo conocido\r13\r\rFalta informacion\r29\r\r\r\r\rif_else()\rLa función ifelse() puede ser usada para convertir una variable con múltiples niveles y agregarlos en solo dos niveles en una nueva variable.\nPor ejemplo, podemos crear una variable discreta con los siguientes niveles Largo y Corto, con base en el tiempo de sueño total (sleep_total).\nmsleep %\u0026gt;%\rselect(name, sleep_total) %\u0026gt;%\rmutate(sleep_time = ifelse(sleep_total \u0026gt; 10, \u0026quot;Largo\u0026quot;, \u0026quot;Corto\u0026quot;)) \r\r\rsleep_time\rn\r\r\r\rCorto\r39\r\rLargo\r44\r\r\r\r\rcase_when()\rcase_when() permite evaluar múltiples condicionales lógicos para crear nuevos niveles de una variable discreta. Para todos los valores que no son considerados en los condicionales la opción TRUE ~ \u0026quot;nuevo_nombre\u0026quot;, permite otorgarles una categoría.\nmsleep %\u0026gt;%\rselect(name, sleep_total) %\u0026gt;%\rmutate(\rsleep_total_discr = case_when(\rsleep_total \u0026gt; 13 ~ \u0026quot;Prolongado\u0026quot;,\rsleep_total \u0026gt; 10 ~ \u0026quot;Largo\u0026quot;,\rsleep_total \u0026gt; 7 ~ \u0026quot;Limitado\u0026quot;,\rTRUE ~ \u0026quot;Corto\u0026quot;\r)\r) %\u0026gt;%\rmutate(sleep_total_discr = factor(\rsleep_total_discr,\rlevels = c(\u0026quot;Corto\u0026quot;, \u0026quot;Limitado\u0026quot;,\r\u0026quot;Largo\u0026quot;, \u0026quot;Prolongado\u0026quot;)\r)) %\u0026gt;% count(sleep_total_discr)\r\r\rname\rsleep_total\rsleep_total_discr\r\r\r\rCheetah\r12.1\rLargo\r\rOwl monkey\r17.0\rProlongado\r\rMountain beaver\r14.4\rProlongado\r\rGreater short-tailed shrew\r14.9\rProlongado\r\rCow\r4.0\rCorto\r\rThree-toed sloth\r14.4\rProlongado\r\r\r\rLa función case_when() puede evaluar condicionales en más de una columna:\nmsleep %\u0026gt;%\rmutate(\rsilly_groups = case_when(\rbrainwt \u0026lt; 0.001 ~ \u0026quot;Peso_cerebro_ligero\u0026quot;,\rsleep_total \u0026gt; 10 ~ \u0026quot;Sueño_prolongado\u0026quot;,\ris.na(sleep_rem) ~ \u0026quot;Ausencia_rem\u0026quot;,\rTRUE ~ \u0026quot;Otros\u0026quot;\r)\r) %\u0026gt;%\rcount(silly_groups)\r\r\rsilly_groups\rn\r\r\r\rAusencia_rem\r8\r\rOtros\r30\r\rPeso_cerebro_ligero\r6\r\rSueño_prolongado\r39\r\r\r\r\rSeparar y unir columnas\rUsaremos el siguinete dataframe como ejemplo:\n\r\rconservation_abbreviation\r\r\r\rEX = Extinct\r\rEW = Extinct in the wild\r\rCR = Critically Endangered\r\rEN = Endangered\r\rVU = Vulnerable\r\rNT = Near Threatened\r\rLC = Least Concern\r\rDD = Data deficient\r\rNE = Not evaluated\r\rPE = Probably extinct (informal)\r\rPEW = Probably extinct in the wild (informal)\r\r\r\rSe puede separar los elemento de una columna mediante la función separate(). Los argumentos de esta función son: el nombre de la columna a separar, los nombres de las nuevas columnas y el elemento usado como separador.\nEl siguiente ejemplo separa la columna usando como separador =.\nconservation_table \u0026lt;- conservation_expl %\u0026gt;%\rseparate(\rconservation_abbreviation,\rinto = c(\u0026quot;abbreviation\u0026quot;, \u0026quot;description\u0026quot;),\rsep = \u0026quot; = \u0026quot;\r)\rconservation_table\r\r\rabbreviation\rdescription\r\r\r\rEX\rExtinct\r\rEW\rExtinct in the wild\r\rCR\rCritically Endangered\r\rEN\rEndangered\r\rVU\rVulnerable\r\rNT\rNear Threatened\r\rLC\rLeast Concern\r\rDD\rData deficient\r\rNE\rNot evaluated\r\rPE\rProbably extinct (informal)\r\rPEW\rProbably extinct in the wild (informal)\r\r\r\rLa función unite() realiza la tarea opuesta. Debe especificarse el nombre de la columna nueva, los nombres de las columnas a ser unidas y finalmente el separador que será usado.\nconservation_table %\u0026gt;%\runite(united_col, abbreviation, description, sep=\u0026quot;: \u0026quot;)\r\r\runited_col\r\r\r\rEX: Extinct\r\rEW: Extinct in the wild\r\rCR: Critically Endangered\r\rEN: Endangered\r\rVU: Vulnerable\r\rNT: Near Threatened\r\rLC: Least Concern\r\rDD: Data deficient\r\rNE: Not evaluated\r\rPE: Probably extinct (informal)\r\rPEW: Probably extinct in the wild (informal)\r\r\r\r\rspread() - gather()\rLa función gather() permite reunir múltiples columnas en una. En este ejemplo tenemos tres columnas que contienen información sobre el tiempo de sueño. Para realizar algunos análisis y construir gráficos puede ser necesario tener toda esta información en una sola columna.\nEsta función necesita como primer argumento el nombre de la nueva columna (\u0026quot;key\u0026quot;), seguido de un nombre para la columna que almacenara los valores de cada observación (\u0026quot;value\u0026quot;). Las columnas que no deseas unir debe de ser deseleccionadas mediante -.\nmsleep_g \u0026lt;- msleep %\u0026gt;%\rselect(name, contains(\u0026quot;sleep\u0026quot;)) %\u0026gt;%\rgather(key = \u0026quot;sleep_measure\u0026quot;, value = \u0026quot;time\u0026quot;, -name)\rmsleep_g\r\r\rname\rsleep_measure\rtime\r\r\r\rCheetah\rsleep_total\r12.1\r\rOwl monkey\rsleep_total\r17.0\r\rMountain beaver\rsleep_total\r14.4\r\rGreater short-tailed shrew\rsleep_total\r14.9\r\rCow\rsleep_total\r4.0\r\rThree-toed sloth\rsleep_total\r14.4\r\r\r\rLa función spread() permite desarrollar la tarea opuesta, separar una columna en múltiples columnas.\nmsleep_g %\u0026gt;%\rspread(sleep_measure, time)\r\r\rname\rsleep_cycle\rsleep_rem\rsleep_total\r\r\r\rAfrican elephant\rNA\rNA\r3.3\r\rAfrican giant pouched rat\rNA\r2\r8.3\r\rAfrican striped mouse\rNA\rNA\r8.7\r\rArctic fox\rNA\rNA\r12.5\r\rArctic ground squirrel\rNA\rNA\r16.6\r\rAsian elephant\rNA\rNA\r3.9\r\r\r\r\rReferencias:\rBasado en el tutorial de Suzan Baert: Data Wrangling Part 2: Transforming your columns into the right shape\r\r\r","date":1541980800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1541980800,"objectID":"29eef947ae12870f51634b87f51dfc63","permalink":"/post/2018-11-12-data_wrangling_2/","publishdate":"2018-11-12T00:00:00Z","relpermalink":"/post/2018-11-12-data_wrangling_2/","section":"post","summary":"La base de datos:\rContinuaremos usando trabajando con la base de datos msleep, para facilitar la reproductibilidad y experimentacion del codigo.\nlibrary(tidyverse)\rglimpse(msleep)\r## Observations: 83\r## Variables: 11\r## $ name \u0026lt;chr\u0026gt; \u0026quot;Cheetah\u0026quot;, \u0026quot;Owl monkey\u0026quot;, \u0026quot;Mountain beaver\u0026quot;, \u0026quot;Grea...\r## $ genus \u0026lt;chr\u0026gt; \u0026quot;Acinonyx\u0026quot;, \u0026quot;Aotus\u0026quot;, \u0026quot;Aplodontia\u0026quot;, \u0026quot;Blarina\u0026quot;, \u0026quot;Bo...\r## $ vore \u0026lt;chr\u0026gt; \u0026quot;carni\u0026quot;, \u0026quot;omni\u0026quot;, \u0026quot;herbi\u0026quot;, \u0026quot;omni\u0026quot;, \u0026quot;herbi\u0026quot;, \u0026quot;herbi...\r## $ order \u0026lt;chr\u0026gt; \u0026quot;Carnivora\u0026quot;, \u0026quot;Primates\u0026quot;, \u0026quot;Rodentia\u0026quot;, \u0026quot;Soricomorph...\r## $ conservation \u0026lt;chr\u0026gt; \u0026quot;lc\u0026quot;, NA, \u0026quot;nt\u0026quot;, \u0026quot;lc\u0026quot;, \u0026quot;domesticated\u0026quot;, NA, \u0026quot;vu\u0026quot;, N.","tags":["R Markdown","Data management"],"title":"Data Wrangling Part 2","type":"post"},{"authors":null,"categories":["R"],"content":"\rLos paquetes en R:\r\rtidyverse proporciona herramientas para el manejo y análisis de datos, se compone de múltiples paquetes que tienen una gramática común.\r\r#install.packages(\u0026quot;tidyverse\u0026quot;)\r#install.packages(\u0026quot;knitr\u0026quot;)\rlibrary(tidyverse)\rlibrary(knitr)\r\rLa base de datos:\rPara este ejemplo modificamos la información de la base de datos BCI del paquete vegan.\n\r\rParcela\rEspecie\rDAP\rArea basal\r\r\r\r1\rAlchornea.costaricensis\r58.20399\r1537.5070\r\r1\rAlchornea.costaricensis\r34.17312\r628.7020\r\r1\rAlseis.blackiana\r31.93349\r2280.5507\r\r1\rAlseis.blackiana\r58.21579\r523.1222\r\r1\rAlseis.blackiana\r50.99102\r688.7522\r\r1\rAlseis.blackiana\r20.54771\r167.2879\r\r\r\rEstos datos fueron generados aleatoriamente para este ejemplo, no corresponden a ningún inventario real. Se toma como modelo la información colectada en una parcela de 1ha; dividida en 25 sub parcelas, en las cuales se tiene el registro de cada uno de los individuos encontrados en esta e identificados a nivel de especie.\n\rConociendo nuestros datos:\rUna vez que tenemos los datos en R es necesario revisar algunas características básicas de estos; el comando dim(), nos permite conocer el número de observaciones y variables que contiene el dataframe.\ndim(data)\r## [1] 21457 4\rEl comando head() nos permitirá revisar la información contenida en las primeras seis filas de nuestra base de datos.\nhead(data)\r\r\rparcela\respecies\rdap\ra_basal\r\r\r\r1\rAlchornea.costaricensis\r58.20399\r1537.5070\r\r1\rAlchornea.costaricensis\r34.17312\r628.7020\r\r1\rAlseis.blackiana\r31.93349\r2280.5507\r\r1\rAlseis.blackiana\r58.21579\r523.1222\r\r1\rAlseis.blackiana\r50.99102\r688.7522\r\r1\rAlseis.blackiana\r20.54771\r167.2879\r\r\r\rMientras el comando tail() nos permitirá evaluar la información contenida en las últimas seis filas del dataframe.\ntail(data)\r\r\rparcela\respecies\rdap\ra_basal\r\r\r\r9\rZanthoxylum.ekmanii\r52.92339\r2441.6027\r\r9\rZanthoxylum.juniperinum\r24.00718\r298.1951\r\r9\rZanthoxylum.panamense\r29.82363\r533.4744\r\r9\rZanthoxylum.panamense\r56.66680\r1561.7525\r\r9\rZanthoxylum.panamense\r13.85113\r878.2732\r\r9\rZanthoxylum.panamense\r55.19953\r965.3539\r\r\r\rSi buscamos conocer cuáles son las observaciones que corresponden a la sub parcela número 1 podemos hacerlo con el siguiente código:\ndata[which(data$parcela == 1),]\rPodemos conseguir el mismo resultado con la función filter() del paquete dplyr:\ndata %\u0026gt;%\rfilter(parcela == 1)\r\r\rparcela\respecies\rdap\ra_basal\r\r\r\r1\rAlchornea.costaricensis\r58.20399\r1537.5070\r\r1\rAlchornea.costaricensis\r34.17312\r628.7020\r\r1\rAlseis.blackiana\r31.93349\r2280.5507\r\r1\rAlseis.blackiana\r58.21579\r523.1222\r\r1\rAlseis.blackiana\r50.99102\r688.7522\r\r1\rAlseis.blackiana\r20.54771\r167.2879\r\r1\rAlseis.blackiana\r47.60658\r2191.3228\r\r1\rAlseis.blackiana\r45.30955\r300.8101\r\r1\rAlseis.blackiana\r50.63517\r344.4888\r\r1\rAlseis.blackiana\r36.66085\r2201.5223\r\r\r\r\rÍndice de valor de importancia:\rLas comunidades vegetales están compuestas por un grupo de especies, cada una con una abundancia diferente. Todas las especies compiten por acceder a recursos (agua, luz, CO2, etc.), las especies que mejor aprovechen estos recursos serán las que dominen la comunidad, determinando su estructura. La forma como estas aprovechen la energía del sistema nos permitirá conocer el comportamiento ecológico de la comunidad, esto se puede realizar mediante el cálculo de los valores de importancia de cada especie.\nEl índice de valor de inportancia (IVI) define como de las especies presentes en la comunidad contribuyen en el carácter y estructura de un ecosistema (Cottam y Curtis,1956). Este valor se obtiene mediante la sumatoria de la frecuencia relativa, la densidad relativa y la dominancia relativa.\nDensidad y Frecuencia absoluta:\r\rEl primer paso para determinar el valor del IVI, es conocer el número de individuos por especie y el número de sub parcelas en las cuales está presente esta. Esto podemos obtenerlo mediante el siguiente código.\r\rdata %\u0026gt;%\rgroup_by(especies) %\u0026gt;% summarise(\rn_individuos = n(),# número de individuos de la especie \u0026quot;i\u0026quot;.\rn_suplot = n_distinct(parcela),#número de sub parcelas en las que esta presente la especie.\rarea_basal = sum(a_basal)# area basal total de la especie \u0026quot;i\u0026quot;.\r)\r\r\rEspecie\rIndi. por especie\rFrecuencia\rArea basal\r\r\r\rAbarema.macradenia\r1\r1\r2123.6063\r\rAcalypha.diversifolia\r2\r2\r3813.0391\r\rAcalypha.macrostachya\r1\r1\r549.2872\r\rAdelia.triloba\r92\r27\r145035.1581\r\rAegiphila.panamensis\r23\r18\r26252.8386\r\rAlchornea.costaricensis\r156\r44\r243556.8048\r\r\r\r\rDensidad, Frecuencia y Dominancia Relativa:\rDensidad relativa: DR\r\rO abundancia relativa, es el número de individuos de una especie dividida entre el número total de individuos de la comunidad multiplicado por cien.\r\r\rFrecuencia relativa: FR\rEs la frecuencia (número de sub parcelas en las cuales ocurre la especie) dividida por la suma de las frecuencias de todas las especies, multiplicado por cien.\n\rDominancia relativa: DmR\rLa dominancia se mide en función al área basal (es el área en m² que ocupa un corte transversal del tronco) de cada una de las especies, se calcula dividiendo el área basal de la especie por la sumatoria de las áreas basales de todas las especies presentes en la parcela, multiplicándola por cien.\n\rFinalmente el valor de importancia: IVI\n IVI = (DR + FR + DmR)/3\r\rLas siguientes líneas nos permiten determinar cada uno de los valores antes mencionados. Para no desplegar toda la tabla solo se mostraran las diez especies con mayor valor de importancia.\ndata %\u0026gt;%\rgroup_by(especies) %\u0026gt;% summarise(n_individuos = n(),\rn_suplot = n_distinct(parcela),\rarea_basal = sum(a_basal)) %\u0026gt;% mutate(dens_rela = (n_individuos/sum(n_individuos))*100,\rfrec_rela = (n_suplot/ sum(n_suplot))*100,\rdom_rela = (area_basal/sum(area_basal))*100) %\u0026gt;% rowwise() %\u0026gt;% mutate(ivi = (sum(dens_rela, frec_rela, dom_rela)/3)) %\u0026gt;% arrange(desc(ivi)) \r\r\rEspecie\rDR\rFR\rDmR\rIVI\r\r\r\rFaramea.occidentalis\r8.002051\r1.101564\r7.923401\r5.675672\r\rTrichilia.tuberculata\r7.834273\r1.101564\r7.895510\r5.610449\r\rAlseis.blackiana\r4.581256\r1.101564\r4.550407\r3.411076\r\rOenocarpus.mapora\r3.672461\r1.101564\r3.672995\r2.815673\r\rPoulsenia.armata\r3.518665\r1.013439\r3.475680\r2.669262\r\rQuararibea.asterolepis\r3.374190\r1.079533\r3.417299\r2.623674\r\rHirtella.triandra\r3.173789\r1.101564\r3.160828\r2.478727\r\rGustavia.superba\r3.001352\r1.079533\r3.015589\r2.365491\r\rVirola.sebifera\r2.875519\r1.035470\r2.915675\r2.275555\r\rTetragastris.panamensis\r1.766323\r1.101564\r1.832223\r1.566704\r\r\r\r\r\r\rClases dimétricas:\r\rPara determinar las clases dimétricas, es necesario conocer el rango en el cual varia el DAP de los árboles, así podemos determinar el número de clases con la cual deseamos trabajar.\r\rdata %\u0026gt;% summarise(Dap_min = min(dap),\rDap_max = max(dap),\rRamgo = Dap_max - Dap_min) \r\r\rDap_min\rDap_max\rRamgo\r\r\r\r10.00368\r59.99474\r49.99106\r\r\r\r\rSe puede ver que el DAP varía entre 10 y 59.7. El rango de los datos es 50, podemos determinar por ejemplo cinco clases dimétricas cada 10 cm:\r\r\r\rIntervalo\rClase\r\r\r\r10 - 20\rClase 1\r\r20 - 30\rClase 2\r\r30 - 40\rClase 3\r\r40 - 50\rClase 4\r\r50 - 60\rClase 5\r\r…\rClase …\r\r\r\r\rLas siguientes líneas crean una nueva columna en el dataframe (base de datos), asignando cada una de las observaciones a una de las clases dimétricas:\r\r# Creamos un nuevo dataframe con la columna diam_class y la asignamos al objeto clase_diametrica.\rclase_diametrica \u0026lt;- data %\u0026gt;% mutate(\rdiam_class = case_when(\rdap \u0026gt;= 10 \u0026amp; dap \u0026lt; 20 ~ \u0026quot;Clase_1\u0026quot;,\rdap \u0026gt;= 20 \u0026amp; dap \u0026lt; 30 ~ \u0026quot;Clase_2\u0026quot;,\rdap \u0026gt;= 30 \u0026amp; dap \u0026lt; 40 ~ \u0026quot;Clase_3\u0026quot;,\rdap \u0026gt;= 40 \u0026amp; dap \u0026lt; 50 ~ \u0026quot;Clase_4\u0026quot;,\rdap \u0026gt;= 50 \u0026amp; dap \u0026lt; 60 ~ \u0026quot;Clase_5\u0026quot;,\ris.na(dap) ~ \u0026quot;sin DAP\u0026quot; ))\r\r\r\rSub parcela\rEspecie\rDAP\rArea basal\rClase diametrica\r\r\r\r1\rAlchornea.costaricensis\r58.20399\r1537.5070\rClase_5\r\r1\rAlchornea.costaricensis\r34.17312\r628.7020\rClase_3\r\r1\rAlseis.blackiana\r31.93349\r2280.5507\rClase_3\r\r1\rAlseis.blackiana\r58.21579\r523.1222\rClase_5\r\r1\rAlseis.blackiana\r50.99102\r688.7522\rClase_5\r\r1\rAlseis.blackiana\r20.54771\r167.2879\rClase_2\r\r1\rAlseis.blackiana\r47.60658\r2191.3228\rClase_4\r\r1\rAlseis.blackiana\r45.30955\r300.8101\rClase_4\r\r1\rAlseis.blackiana\r50.63517\r344.4888\rClase_5\r\r1\rAlseis.blackiana\r36.66085\r2201.5223\rClase_3\r\r\r\r\rLa primera clase (Clase 1) dimétricas está conformada por todos los arboles con un DAP entre 10 y 20 cm, el código incluye en este grupo todos los arboles con un DAP mayor igual a 10 y menor a 20. (dap \u0026gt;= 10 \u0026amp; dap \u0026lt; 20 ~ \u0026quot;Clase_1\u0026quot;).\n\rEl siguiente código genera una tabla resumen con los valores mínimos, máximos, rango y número de individuos por cada clase dimétricas.\n\r\rclase_diametrica %\u0026gt;% group_by(diam_class) %\u0026gt;% summarise(min = min(dap),\rmax = max(dap), rango =max- min,\rn = n()) \r\r\rClase diametrica\rMin_DAP\rMax_DAP\rRango\rN_individuos\r\r\r\rClase_1\r10.00368\r19.99822\r9.994543\r4285\r\rClase_2\r20.00008\r29.99974\r9.999653\r4235\r\rClase_3\r30.00141\r39.99791\r9.996503\r4255\r\rClase_4\r40.00036\r49.99776\r9.997399\r4368\r\rClase_5\r50.00166\r59.99474\r9.993082\r4314\r\r\r\r\rLa representación gráfica de las clases dimétricas la obtendremos mediante las siguientes líneas de código:\r\rclase_diametrica %\u0026gt;%\rgroup_by(diam_class) %\u0026gt;% summarise(min = min(dap),\rmax = max(dap), rango =max- min,\rn = n()) %\u0026gt;% ggplot(aes(diam_class, n)) +\rgeom_point(size = 5, color = \u0026quot;red\u0026quot;)+\rgeom_line(aes(c(1:5), n), linetype = \u0026quot;dashed\u0026quot;)+\rtheme_bw()+\rscale_y_continuous(breaks=seq(75,150,5))+\rtheme(axis.text.x = element_text(angle=0, vjust=0.5, size=11, face = \u0026quot;bold\u0026quot;),\raxis.text.y.left = element_text(angle = 0, vjust = .5,\rsize = 11, face = \u0026quot;bold\u0026quot;), axis.title.y = element_text(size = 14),\raxis.title.x = element_text(size = 14),\rplot.title = element_text(hjust = .5, face = \u0026quot;bold\u0026quot;))+\rlabs(x = \u0026quot;Clase Diametrica\u0026quot;, y = \u0026quot;Número de individuos\u0026quot;,\rtitle = \u0026quot;Estructura Dimétrica\u0026quot;)\r\r","date":1538697600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1538697600,"objectID":"aa3c20f8ce96c6276891caf437094cac","permalink":"/post/2018-10-05-indice_valor_importancia/","publishdate":"2018-10-05T00:00:00Z","relpermalink":"/post/2018-10-05-indice_valor_importancia/","section":"post","summary":"Los paquetes en R:\r\rtidyverse proporciona herramientas para el manejo y análisis de datos, se compone de múltiples paquetes que tienen una gramática común.\r\r#install.packages(\u0026quot;tidyverse\u0026quot;)\r#install.packages(\u0026quot;knitr\u0026quot;)\rlibrary(tidyverse)\rlibrary(knitr)\r\rLa base de datos:\rPara este ejemplo modificamos la información de la base de datos BCI del paquete vegan.\n\r\rParcela\rEspecie\rDAP\rArea basal\r\r\r\r1\rAlchornea.costaricensis\r58.20399\r1537.5070\r\r1\rAlchornea.costaricensis\r34.17312\r628.7020\r\r1\rAlseis.","tags":["Dataviz","Plant diversity","Data management"],"title":"Índice Valor Importancia","type":"post"},{"authors":null,"categories":["R"],"content":"\rEsta nos muestra el número de especies acumuladas conforme se incrementa el área de estudio (Unidad de esfuerzo), así el número de especies se incrementara hasta un punto en el cual no se registraran muevas especies.\nLa paqueteria:\rLos paquetes o librerías permiten ampliar las capacidades de R para cumplir determinadas tareas. vegan provee herramientas básicas para el análisis de diversidad en estudios de ecología de comunidades. tidyverse proporciona herramientas para el manejo y análisis de datos, se compone de múltiples paquetes que tienen una gramática común.\nlibrary(vegan)\rlibrary(tidyverse)\r\rLa base de datos:\rUtilizaremos la base de datos BCI esta contiene los resultados del inventario de especies en 50 parcelas de una hectárea. Esta base de datos es parte del paquete vegan, lo cual nos permite la reproductibilidad del tutorial.\ndata(\u0026quot;BCI\u0026quot;)\rPara conocer más sobre esta base de datos:\n#?BCI\r\rConociendo nuestros datos:\rEl comando dim() nos permite conocer la dimencion de nuestra base de datos. En este ejemplo, podemos conocer el número de parcelas y el número total de especies.\ndim(BCI)\r## [1] 50 225\rR nos permite examinar partes específicas de nuestra base de datos (subsetting), esta tarea puede realizarse mediante los operadores: Corchete cuadrado [índice_fila,índice_columna] o Signo dolar base_datos$nombre_variable.\nEl siguiente código nos permite evaluar la información de cierto grupo de parcelas:\nRecupera los datos correspondientes a las cinco primeras especies de la parcela número “1”.\nBCI[1,1:5] ## Abarema.macradenia Vachellia.melanoceras Acalypha.diversifolia\r## 1 0 0 0\r## Acalypha.macrostachya Adelia.triloba\r## 1 0 0\rRecupera los datos de las cinco primeras especies en las parcelas “1, 2, 3, 4 y 5”.\nBCI[1:5,1:5]\r## Abarema.macradenia Vachellia.melanoceras Acalypha.diversifolia\r## 1 0 0 0\r## 2 0 0 0\r## 3 0 0 0\r## 4 0 0 0\r## 5 0 0 0\r## Acalypha.macrostachya Adelia.triloba\r## 1 0 0\r## 2 0 0\r## 3 0 0\r## 4 0 3\r## 5 0 1\rCon las siguientes líneas podemos examinar la información de especies específicas. El siguiente codino nos permitira evaluar los datos correspondientes a la espeecie Acalypha.diversifolia que ocupa la tercera columna de la base de datos:\nSelección mediante índices:\nBCI[,3]\r## [1] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0\r## [36] 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0\rSelección por nombre:\nBCI$Acalypha.diversifolia\r## [1] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0\r## [36] 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0\rComparando ambos métodos:\nBCI[,3] == BCI$Acalypha.diversifolia\r## [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\r## [15] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\r## [29] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\r## [43] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\rTambién podemos evaluar la información de grupos de especies:\nRecupera la información de las especies ubicadas entre las primeras cinco columnas y las parcelas 1,2,3,4,5:\nBCI[1:5,1:5] ## Abarema.macradenia Vachellia.melanoceras Acalypha.diversifolia\r## 1 0 0 0\r## 2 0 0 0\r## 3 0 0 0\r## 4 0 0 0\r## 5 0 0 0\r## Acalypha.macrostachya Adelia.triloba\r## 1 0 0\r## 2 0 0\r## 3 0 0\r## 4 0 3\r## 5 0 1\rDe esta forma se puede recuperar la información de especies especificas.\n\rBCI[1:5, c(\u0026quot;Vachellia.melanoceras\u0026quot;, \u0026quot;Acalypha.diversifolia\u0026quot;, \u0026quot;Acalypha.macrostachya\u0026quot;)] ## Vachellia.melanoceras Acalypha.diversifolia Acalypha.macrostachya\r## 1 0 0 0\r## 2 0 0 0\r## 3 0 0 0\r## 4 0 0 0\r## 5 0 0 0\r\rInformación adicional:\rMediante el siguiente código podemos conocer el número total de individuos por cada parcela:\napply(BCI, 1, sum)\r## 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 ## 448 435 463 508 505 412 416 431 409 483 401 366 409 438 462 437 381 347 ## 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 ## 433 429 408 418 340 392 442 407 417 387 364 475 421 459 436 447 601 430 ## 37 38 39 40 41 42 43 44 45 46 47 48 49 50 ## 435 447 424 489 402 414 407 409 444 430 425 415 427 432\rY el número total de individuos por especie:\napply(BCI, 2, sum)[1:10]\r## Abarema.macradenia Vachellia.melanoceras Acalypha.diversifolia ## 1 3 2 ## Acalypha.macrostachya Adelia.triloba Aegiphila.panamensis ## 1 92 23 ## Alchornea.costaricensis Alchornea.latifolia Alibertia.edulis ## 156 1 1 ## Allophylus.psilospermus ## 27\r\rComo construir la curva de acumulación:\rvegan\rLa función specaccum() del paquete vegan, permite estimar las curvas de acumulación de especies. Esta función necesita como argumento primario la base de datos.\ncurva \u0026lt;- specaccum(BCI)\r## Warning in cor(x \u0026gt; 0): the standard deviation is zero\rEl grafico que buscamos se obtiene mediante el siguiente código:\nplot(curva)\r\rtidyverse - ggplot2\rPodemos producir un gráfico de calidad con la ayuda de las funciones del paquete ggplot2–Elegant Graphics for Data Analysis. Para cumplir esta tarea es necesario construir una base de datos nueva recuperando información resultante de la función speccacum(), estos resultados serán asignados como curva.\n\rcurva \u0026lt;- data_frame(parcela = curva$sites,\rriqueza = curva$richness,\rdes_sta = curva$sd) curva\r## # A tibble: 50 x 3\r## parcela riqueza des_sta\r## \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 1 90.8 6.93\r## 2 2 122. 7.19\r## 3 3 139. 7.00\r## 4 4 151. 6.64\r## 5 5 159. 6.25\r## 6 6 166. 5.89\r## 7 7 171. 5.59\r## 8 8 176. 5.34\r## 9 9 179. 5.13\r## 10 10 183. 4.95\r## # ... with 40 more rows\rUna vez construida la base de datos podemos construir el grafico de la curva de acumulación mediante el siguiente código:\ncurva %\u0026gt;% ggplot(aes(parcela, riqueza))+\rgeom_line(linetype = 1, size = .5, color = \u0026quot;red\u0026quot;) +\rgeom_errorbar(aes(ymin = riqueza - des_sta, ymax = riqueza + des_sta),\rwidth = 0, size = 1)+\rgeom_point(color = \u0026quot;red\u0026quot;, size = 1.5)+\rtheme_bw()+\rscale_y_continuous(name = \u0026quot;Número de especies\u0026quot;)+\rscale_x_continuous(name = \u0026quot;Unidad de esfuerzo\u0026quot;)+\rtheme(axis.text.x = element_text(angle = 0, vjust = 0.5, size = 14),\raxis.text.y.left = element_text(angle = 0, vjust = 0.5, size = 14),\raxis.title.y = element_text(size = 18),\raxis.title.x = element_text(size = 18),\rlegend.background = element_blank(),\rlegend.key = element_blank(),\rlegend.title = element_text(size=12, face=\u0026quot;bold\u0026quot;),\rplot.title = element_text(hjust = .5, face = \u0026quot;bold\u0026quot;, size = 21),\rlegend.justification=c(0,1), legend.position=c(.8, 1))+\rlabs( color = \u0026quot;\u0026quot;, fill=\u0026quot;\u0026quot;)+\rggtitle(\u0026quot;Curva de acumulación\u0026quot;)\r\r\r","date":1537574400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1537574400,"objectID":"410d8110eb865399c9253f87bb3d0b50","permalink":"/post/2018-09-22-curva_de_acumulacion/","publishdate":"2018-09-22T00:00:00Z","relpermalink":"/post/2018-09-22-curva_de_acumulacion/","section":"post","summary":"Esta nos muestra el número de especies acumuladas conforme se incrementa el área de estudio (Unidad de esfuerzo), así el número de especies se incrementara hasta un punto en el cual no se registraran muevas especies.\nLa paqueteria:\rLos paquetes o librerías permiten ampliar las capacidades de R para cumplir determinadas tareas. vegan provee herramientas básicas para el análisis de diversidad en estudios de ecología de comunidades. tidyverse proporciona herramientas para el manejo y análisis de datos, se compone de múltiples paquetes que tienen una gramática común.","tags":["Dataviz","Plant diversity"],"title":"Curvas de acumulación de especies","type":"post"},{"authors":null,"categories":null,"content":" In this tutorial, I\u0026rsquo;ll share my top 10 tips for getting started with Academic:\nTip 1 \u0026hellip;\nTip 2 \u0026hellip;\n","date":1536415200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1536415200,"objectID":"6a451186c775f5f0adb3a0416d0cb711","permalink":"/tutorial/example/","publishdate":"2018-09-09T00:00:00+10:00","relpermalink":"/tutorial/example/","section":"tutorial","summary":"In this tutorial, I\u0026rsquo;ll share my top 10 tips for getting started with Academic:\nTip 1 \u0026hellip;\nTip 2 \u0026hellip;","tags":null,"title":"Example Page","type":"docs"},{"authors":null,"categories":["Example"],"content":"Este sitio fue construido siguiendo los tutoriales escritos por:\n Allison Hill Up and running with blogdown .   Amber Thomas Making a Website Using Blogdown, Hugo, and GitHub pages.   Emi Tanaka Blinging up your website built with hugo via blogdown R package.  ","date":1536278400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1536278400,"objectID":"eb5576db17b1c42cde1455b974d8ebfe","permalink":"/note/another-note/","publishdate":"2018-09-07T00:00:00Z","relpermalink":"/note/another-note/","section":"note","summary":"Este sitio fue construido siguiendo los tutoriales escritos por:\n Allison Hill Up and running with blogdown .   Amber Thomas Making a Website Using Blogdown, Hugo, and GitHub pages.   Emi Tanaka Blinging up your website built with hugo via blogdown R package.  ","tags":["Tutorial"],"title":"Blogdown Tutorial.","type":"note"},{"authors":null,"categories":["R"],"content":"\rThis is a modification of a blog written by Sean Kross, using tidyverse.\nEsta es una modificación de un blog escrito por Sean Kross1, utilizando tidyverse2.\n\rImagina que estás buscando estimar el promedio de una alguna característica de una población.\r\r\rConformada por 100 000 individuos.\r\rset.seed(2016-05-04)\rpoblacion \u0026lt;- data_frame( individuo = seq(1,100000),\rcaracteristica = runif(100000))\r\r\rIndividuo\rCaracteristica\rIndividuo\rCaracteristica\r\r\r\r1\r0.6770751\r99995\r0.2685845\r\r2\r0.2718245\r99996\r0.6156618\r\r3\r0.1031951\r99997\r0.5487510\r\r4\r0.6260607\r99998\r0.9394554\r\r5\r0.4148852\r99999\r0.2003218\r\r6\r0.1208850\r100000\r0.3245546\r\r\r\r\rLo que estamos buscando es determinar el promedio real de esta población 0.4994207.\n\rPero normalmente no podemos medir cada uno de los individuos de esta población. Entonces recurrimos a tomar muestras:\n\r\rmuestra \u0026lt;- poblacion %\u0026gt;% sample_n(100) \r\r\rIndividuo\rCaracteristica\rIndividuo\rCaracteristica\r\r\r\r35615\r0.8432771\r46467\r0.3239921\r\r39573\r0.1031897\r37849\r0.1318304\r\r20293\r0.0256345\r51620\r0.8140491\r\r24971\r0.4679286\r58111\r0.1603601\r\r49940\r0.1825075\r73669\r0.6941355\r\r41016\r0.5984844\r80515\r0.1561754\r\r\r\r\rAhora con esta muestra podemos construir el intervalo de confianza al 95%:\r\r# Funcion ci \u0026lt;- function(x) {\rci \u0026lt;- 1.96 * (sd(x)/sqrt(length(x)))\rreturn(ci) }\rmuestra %\u0026gt;% summarise(\rLim_inf = mean(caracteristica) - ci(caracteristica),\rPromedio = mean(caracteristica),\rLim_sup = mean(caracteristica) + ci(caracteristica))\r\r\rLim_inf\rPromedio\rLim_sup\r\r\r\r0.4272098\r0.4861666\r0.5451233\r\r\r\r\rIntervalo de confianza?\rSi tomamos varias muestras de una población, el promedio real de esta debería ser contenido por el intervalo de confianza de la muestra.\r\rTomemos 10000 muestras de la población.\npoblacion %\u0026gt;% rep_sample_n(size = 100, reps = 10000) %\u0026gt;% group_by(replicate) %\u0026gt;% summarise(ci = ci(caracteristica),\rmean = mean(caracteristica))\r\r\rReplica\rPromedio\rLim_inf.\rLim_sup.\r\r\r\r1\r0.5307512\r0.4751697\r0.5863327\r\r2\r0.4812784\r0.4242176\r0.5383393\r\r3\r0.5157841\r0.4547610\r0.5768072\r\r4\r0.5381850\r0.4807046\r0.5956653\r\r5\r0.4940284\r0.4402182\r0.5478385\r\r6\r0.5054807\r0.4523920\r0.5585694\r\r9995\r0.4516500\r0.3985059\r0.5047941\r\r9996\r0.4659221\r0.4077211\r0.5241232\r\r9997\r0.4911695\r0.4347661\r0.5475728\r\r9998\r0.4470487\r0.3898829\r0.5042144\r\r9999\r0.5274931\r0.4705851\r0.5844011\r\r10000\r0.4439522\r0.3892858\r0.4986186\r\r\r\r\rCual es el porcentaje de muestras que capturan el promedio real de la población?\r\rreplicas %\u0026gt;%\rmutate(prom_real =\rcase_when(lim_inf \u0026lt; 0.4994207 \u0026amp; 0.4994207\u0026lt;lim_sup ~ 1, TRUE ~ 0)) %\u0026gt;%\rsummarise(mean(prom_real))\r\rEl 0.95 porciento de las muestras captura el promedio real de la población.\n\rVisualización grafica de los intervalos de confianza.\n\r\rreplicas %\u0026gt;% sample_n(100) %\u0026gt;% ggplot(aes(replicate, prom))+\rgeom_pointrange(aes(ymin =lim_inf, ymax =lim_sup), size = 0, color = \u0026quot;#1B7837\u0026quot;)+\rtheme_bw()+\rgeom_hline(yintercept = mean(poblacion$caracteristica),\rcolor = \u0026quot;red\u0026quot;, size = 1.2)+\rlabs(x = \u0026quot;Replicas\u0026quot;,\ry = \u0026quot;\u0026quot;)\r\rBasado en A Short Intro to Confidence Intervals por Sean Kross.↩\n\rTidyverse.↩\n\r\r\r","date":1536278400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1536278400,"objectID":"052e3ef5d6bb01388d1bf2720c71a04b","permalink":"/post/2018-09-07-intervalos_de_confianza/","publishdate":"2018-09-07T00:00:00Z","relpermalink":"/post/2018-09-07-intervalos_de_confianza/","section":"post","summary":"This is a modification of a blog written by Sean Kross, using tidyverse.\nEsta es una modificación de un blog escrito por Sean Kross1, utilizando tidyverse2.\n\rImagina que estás buscando estimar el promedio de una alguna característica de una población.\r\r\rConformada por 100 000 individuos.\r\rset.seed(2016-05-04)\rpoblacion \u0026lt;- data_frame( individuo = seq(1,100000),\rcaracteristica = runif(100000))\r\r\rIndividuo\rCaracteristica\rIndividuo\rCaracteristica\r\r\r\r1\r0.","tags":["R Markdown","plot"],"title":"Intervalos de Confianza","type":"post"},{"authors":null,"categories":null,"content":" Hi! I\u0026rsquo;m Paul, a plant ecologist, and data enthusiast. I am a biologist from the Universidad Nacional de San Antonio Abad del Cusco - Peru.\nI have worked in tropical forest ecology since 2013. I have gained experience in conservation projects with Frankfurt Zoological Society Peru. I also have collaborated extensively with the Andes Biodiversity and Ecosystem Research Group for around 5 years. ABERG working in the Andes and Amazon regions of Peru such as Manu National Park-Peru and surroundings. I participated in projects that evaluated:\n Carbon and forest dynamics. Co2 and methane fluxes measuring. Plant trait\u0026rsquo;s ecology.  CHAMBASA project from GEM-Trait is the most important research experience that I had, and the topic that was covered really capture my interest. I complete my degree in Biology using leaf level spectral data from this project. After this project, I had more opportunities for work with functional traits in Peru and Australia.\nAlso, I had the opportunity to collaborate with some mammals ecology project, working with the Giant otther (Pteronura brasiliensis), Black caiman (Melanosuchus niger), and more recently with Andean bear (Tremarctos ornatus) ecology.\n ¡Hola! Soy Paul, ecólogo vegetal. Egresado de la Escuela Profesional de Biología en la Universidad Nacional de San Antonio Abad del Cusco - Perú.\nTrabajo en el área de ecología tropical desde el 2013, comencé colaborando en las actividades de la Sociedad Zoológica de Frankfurt–AVISA-Perú. También he tenido la oportunidad de colaborar con Andes Biodiversity and Ecosystem Research Group ABERG los últimos cinco años, este grupo desarrolla su investigación a lo largo del gradiente de elevación en el Parque Nacional Manu y sus alrededores. He tenido la oportunidad de aprender de temas como:\n Dinámica de carbono y la dinámica de bosques. Medición de flujos de Co2 y metano. Ecología de caracteres funcionales.  El proyecto CHAMBASA de GEM-Trait es la experiencia de investigación que me abrió las puertas a un camino muy interesante en mi formación académica; el tema que se cubrió en este capturo mi interés, así pude desarrollar mi tesis de licenciatura en Biología utilizando datos espectrales a nivel de hoja que colecte durante este proyecto.\nAdemás, tuve la oportunidad de colaborar con proyectos de ecología de mamíferos, trabajando con Lobo de Rio (Pteronura brasiliensis), Caimán negro (Melanosuchus niger) y más recientemente he formado parte de un proyecto que estudia la ecología del Oso de anteojos(Tremarctos ornatus).\n","date":1534896000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1534896000,"objectID":"6083a88ee3411b0d17ce02d738f69d47","permalink":"/about/","publishdate":"2018-08-22T00:00:00Z","relpermalink":"/about/","section":"","summary":"Hi! I\u0026rsquo;m Paul, a plant ecologist, and data enthusiast. I am a biologist from the Universidad Nacional de San Antonio Abad del Cusco - Peru.\nI have worked in tropical forest ecology since 2013. I have gained experience in conservation projects with Frankfurt Zoological Society Peru. I also have collaborated extensively with the Andes Biodiversity and Ecosystem Research Group for around 5 years. ABERG working in the Andes and Amazon regions of Peru such as Manu National Park-Peru and surroundings.","tags":null,"title":"About Paul Efren","type":"page"},{"authors":[],"categories":null,"content":"Click on the Slides button above to view the built-in slides feature.\n Slides can be added in a few ways:\n Create slides using Academic\u0026rsquo;s Slides feature and link using url_slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes.  Further talk details can easily be added to this page using Markdown and $\\rm \\LaTeX$ math code.\n","date":1483189200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1483189200,"objectID":"96344c08df50a1b693cc40432115cbe3","permalink":"/talk/example/","publishdate":"2017-01-01T00:00:00+11:00","relpermalink":"/talk/example/","section":"talk","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam.","tags":[],"title":"Example Talk","type":"talk"},{"authors":null,"categories":null,"content":"","date":1461679200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461679200,"objectID":"d1311ddf745551c9e117aa4bb7e28516","permalink":"/project/external-project/","publishdate":"2016-04-27T00:00:00+10:00","relpermalink":"/project/external-project/","section":"project","summary":"An example of linking directly to an external project website using `external_link`.","tags":["Demo"],"title":"External Project","type":"project"},{"authors":null,"categories":null,"content":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1461679200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461679200,"objectID":"8f66d660a9a2edc2d08e68cc30f701f7","permalink":"/project/internal-project/","publishdate":"2016-04-27T00:00:00+10:00","relpermalink":"/project/internal-project/","section":"project","summary":"An example of using the in-built project page.","tags":["Deep Learning"],"title":"Internal Project","type":"project"},{"authors":[],"categories":null,"content":" Academic makes it easy to create a beautiful website for free using Markdown. Customize anything on your site with widgets, themes, and language packs.\nFollow our easy step by step guide to learn how to build your own free website with Academic. Check out the personal demo or the business demo of what you\u0026rsquo;ll get in less than 10 minutes.\n View the documentation Ask a question Request a feature or report a bug Updating? View the Update Guide and Release Notes Support development of Academic:  Donate a coffee Become a backer on Patreon Decorate your laptop or journal with an Academic sticker Wear the T-shirt   \nKey features:\n Easily manage various content including homepage, blog posts, publications, talks, and projects Extensible via color themes and widgets/plugins Write in Markdown for easy formatting and code highlighting, with LaTeX for mathematical expressions Social/academic network linking, Google Analytics, and Disqus comments Responsive and mobile friendly Simple and refreshing one page design Multilingual and easy to customize  Color Themes Academic is available in different color themes and font themes.\n         Ecosystem  Academic Admin: An admin tool to import publications from BibTeX or import assets for an offline site Academic Scripts: Scripts to help migrate content to new versions of Academic  Install You can choose from one of the following four methods to install:\n one-click install using your web browser (recommended) install on your computer using Git with the Command Prompt/Terminal app install on your computer by downloading the ZIP files install on your computer with RStudio  Quick install using your web browser  Install Academic with Netlify  Netlify will provide you with a customizable URL to access your new site  On GitHub, go to your newly created academic-kickstart repository and edit config.toml to personalize your site. Shortly after saving the file, your site will automatically update Read the Quick Start Guide to learn how to add Markdown content. For inspiration, refer to the Markdown content which powers the Demo  Install with Git Prerequisites:\n Download and install Git Download and install Hugo   Fork the Academic Kickstart repository and clone your fork with Git:\ngit clone https://github.com/sourcethemes/academic-kickstart.git My_Website  Note that if you forked Academic Kickstart, the above command should be edited to clone your fork, i.e. replace sourcethemes with your GitHub username.\n Initialize the theme:\ncd My_Website git submodule update --init --recursive   Install with ZIP  Download and extract Academic Kickstart Download and extract the Academic theme to the themes/academic/ folder from the above step  Install with RStudio View the guide to installing Academic with RStudio\nQuick start  If you installed on your computer, view your new website by running the following command:\nhugo server  Now visit localhost:1313 and your new Academic powered website will appear. Otherwise, if using Netlify, they will provide you with your URL.\n Read the Quick Start Guide to learn how to add Markdown content, customize your site, and deploy it. For inspiration, refer to the Markdown content which powers the Demo\n Build your site by running the hugo command. Then host it for free using Github Pages or Netlify (refer to the first installation method). Alternatively, copy the generated public/ directory (by FTP, Rsync, etc.) to your production web server (such as a university\u0026rsquo;s hosting service).\n  Updating Feel free to star the project on Github to help keep track of updates and check out the release notes prior to updating your site.\nBefore updating the framework, it is recommended to make a backup of your entire website directory (or at least your themes/academic directory) and record your current version number.\nBy default, Academic is installed as a Git submodule which can be updated by running the following command:\ngit submodule update --remote --merge  Check out the update guide for full instructions and alternative methods.\nFeedback \u0026amp; Contributing Please use the issue tracker to let me know about any bugs or feature requests, or alternatively make a pull request.\nFor support, head over to the Hugo discussion forum.\nLicense Copyright 2016-present George Cushen.\nReleased under the MIT license.\n","date":1461074400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1515762000,"objectID":"279b9966ca9cf3121ce924dca452bb1c","permalink":"/post/getting-started/","publishdate":"2016-04-20T00:00:00+10:00","relpermalink":"/post/getting-started/","section":"post","summary":"Create a beautifully simple website or blog in under 10 minutes.","tags":["Academic"],"title":"Academic: the website designer for Hugo","type":"post"},{"authors":["GA Cushen"],"categories":null,"content":"More detail can easily be written here using Markdown and $\\rm \\LaTeX$ math code.\n","date":1441029600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1441029600,"objectID":"d77fa4a74076ffcd7ca6c21cfc27a4b2","permalink":"/publication/person-re-id/","publishdate":"2015-09-01T00:00:00+10:00","relpermalink":"/publication/person-re-id/","section":"publication","summary":"Person re-identification is a critical security task for recognizing a person across spatially disjoint sensors. Previous work can be computationally intensive and is mainly based on low-level cues extracted from RGB data and implemented on a PC for a fixed sensor network (such as traditional CCTV). We present a practical and efficient framework for mobile devices (such as smart phones and robots) where high-level semantic soft biometrics are extracted from RGB and depth data. By combining these cues, our approach attempts to provide robustness to noise, illumination, and minor variations in clothing. This mobile approach may be particularly useful for the identification of persons in areas ill-served by fixed sensors or for tasks where the sensor position and direction need to dynamically adapt to a target. Results on the BIWI dataset are preliminary but encouraging. Further evaluation and demonstration of the system will be available on our website.","tags":[],"title":"A Person Re-Identification System For Mobile Devices","type":"publication"},{"authors":["GA Cushen","MS Nixon"],"categories":null,"content":"More detail can easily be written here using Markdown and $\\rm \\LaTeX$ math code.\n","date":1372600800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1372600800,"objectID":"2b4d919e3cf73dfcd0063c88fe01cb00","permalink":"/publication/clothing-search/","publishdate":"2013-07-01T00:00:00+10:00","relpermalink":"/publication/clothing-search/","section":"publication","summary":"We present a mobile visual clothing search system whereby a smart phone user can either choose a social networking photo or take a new photo of a person wearing clothing of interest and search for similar clothing in a retail database. From the query image, the person is detected, clothing is segmented, and clothing features are extracted and quantized. The information is sent from the phone client to a server, where the feature vector of the query image is used to retrieve similar clothing products from online databases. The phone's GPS location is used to re-rank results by retail store location. State of the art work focuses primarily on the recognition of a diverse range of clothing offline and pays little attention to practical applications. Evaluated on a challenging dataset, the system is relatively fast and achieves promising results.","tags":[],"title":"Mobile visual clothing search","type":"publication"},{"authors":null,"categories":null,"content":"\rPaul Efren Santos Andrade\rContac Information:\r\rEmail paulefrens@gmail.com\n\rTwitter PaulEfrenSantos\n\r\r\rInterests\r\rOpen Science.\rData Managing.\rData visualization.\rPlant Ecology.\rFunctional Traits.\r\r\rEDUCATION:\r\r2014 Bachelor on Biological Science. Universidad Nacional San Antonio Abad del Cusco.\n\r2016 Biologist. Universidad Nacional San Antonio Abad del Cusco.\n\r\r\rPOST GRADUATE COURSES:\r\r2013 Why and how to measure functional characters of plants? - A practical introduction, University of Oxford and Núcleo Diversus.\n\r2018 lnternational Plant Functional Traits Course (PFTC3), University of Bergen, Norway, and the University of Arizona , USA.\n\r\r\rLANGUAGE:\r\rSpoken: Spanish; English (Intermediate level).\n\rComputer: R: Data science; Matlab – básic; Microsoft Office.\n\r\r\rCOLLABORATION - MENTORED:\r\rCo supervisor of undergraduate students: “Effect of Thermal, Hydric and Translocation Variations of Grassland Ecosystem Plots on Co2 Flows at Parque Nacional del Manu”. Universidad Nacional San Antonio Abad del Cusco.\r\r\rPRESENTATIONS EXPERIENCE:\r\rUniversidad Nacional San Antonio Abad del Cusco – ExpoBio Cusco 2017: Caracteres Funcionales? Que? Como? y Por qué? (Plants Functional traits). Oral presentation.\n\rUniversidad Nacional San Antonio Abad del Cusco. Instructor for: Introduction to Data Science – Programming with R. Short Course. February 2018.\n\r\r\rPUBLICATIONS:\r\rChristopher E. Doughty, P.E. Santos-Andrade, et.al. Can leaf spectroscopy predict leaf and forest traits along a Peruvian tropical forest elevation gradients? 2017 JGR Biogeosciences.\r\r\rEXPERIENCE:\r\rZoological Society of Frankfurt - Ayuda para la Vida Silvestre Amenazada,\rDevelopment of Pre-professional Practices. Between September 2012 and December 2012.\n\rSchool of Geo Sciences the University of Edinburgh. “Respiration of soil with the Multiplexer Licor along a gradient of elevation of the Andes to the Amazon”. From June 2011 to December 2012.\n\rInstitute of Biological and Environmental Sciences University of Aberdeen. “Are tropical uplands regional hotspots of methane and nitrous oxide?”. From October 2010 a June 2013.\n\rEnvironmental Change Institute University of Oxford – Instituto de Ciencias de la Naturaleza Territorio y Energía Renovables Pontificia Universidad Católica del Perú. Proyecto RAINFOR – Traits (CHAMBASA Project - CHallenging Attempt to Measure Biotic Attributes along the Slope of the Andes). From April 2013 to November 2013.\n\rEnvironmental Change Institute University of Oxford – University of Leeds. “T- Forces: Changes of tropical forests in the land system”. From June 2014 to October 2014.\n\rDepartment of Environment, Earth \u0026amp; Ecosystems Centre for Earth, Planetary, Space \u0026amp; Astronomical Research (CEPSAR) The Open University. “Evaluate the contribution of tree- stem CH4 and N2O emissions to the total ecosystem emissions from a range of tropical rainforests on the south-eastern slopes of the Andes”. From March 2015 to May 2015.\n\rEnvironmental Change Institute University of Oxford – University of Leeds – James Cook University of Australia. “T- Forces: Changes of tropical forests in the land system”. From June 2015 to October 2015.\n\rUniversity of Miami - Department of Biology. “Factors that influence the dynamics and location of the forest line between the forest and the Puna on Parque Nacional del Manu – Peru at Acjanaco, Qurqurpampa and Tres Cruces (4ta Period)”. From November 2013 to September 2015.\n\rUniversity of Miami - Department of Biology. “Vulnerability to forest drought dominated by Bamboo: Detection with remote sensing and functional adaptation of the plant community in the Amazon - Andean gradient compared to forest without bamboo”. From June to July 2016 and June to August 2017.\n\r\r\r\rInternship\r\rRocky Mountain Biological Lab with Brian Enquist’s lab,part of TraitTrain project from the University of Bergen and the University of Arizona. June to August - 2018.\r\r\r","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"3a72556e05ff5c629b84b96346f7e971","permalink":"/content/vitae/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/content/vitae/","section":"","summary":"Paul Efren Santos Andrade\rContac Information:\r\rEmail paulefrens@gmail.com\n\rTwitter PaulEfrenSantos\n\r\r\rInterests\r\rOpen Science.\rData Managing.\rData visualization.\rPlant Ecology.\rFunctional Traits.\r\r\rEDUCATION:\r\r2014 Bachelor on Biological Science. Universidad Nacional San Antonio Abad del Cusco.\n\r2016 Biologist. Universidad Nacional San Antonio Abad del Cusco.\n\r\r\rPOST GRADUATE COURSES:\r\r2013 Why and how to measure functional characters of plants?","tags":null,"title":"Curriculum Vitae","type":"page"},{"authors":null,"categories":null,"content":" Welcome to Slides Academic\nFeatures  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides  Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E  Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026quot;blueberry\u0026quot; if porridge == \u0026quot;blueberry\u0026quot;: print(\u0026quot;Eating...\u0026quot;)  Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = \\;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\nFragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}}  Press Space to play!\nOne  Two  Three \nA fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears  Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}}  Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view   Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links   night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links  Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026quot;/img/boards.jpg\u0026quot; \u0026gt;}} {{\u0026lt; slide background-color=\u0026quot;#0000FF\u0026quot; \u0026gt;}} {{\u0026lt; slide class=\u0026quot;my-style\u0026quot; \u0026gt;}}  Custom CSS Example Let\u0026rsquo;s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; }  Questions? Ask\nDocumentation\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"c2915ec5da95791851caafdcba9664af","permalink":"/slides/example-slides/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/slides/example-slides/","section":"slides","summary":"Welcome to Slides Academic\nFeatures  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides  Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E  Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026quot;blueberry\u0026quot; if porridge == \u0026quot;blueberry\u0026quot;: print(\u0026quot;Eating...\u0026quot;)  Math In-line math: $x + y = z$","tags":null,"title":"Slides","type":"slides"}]